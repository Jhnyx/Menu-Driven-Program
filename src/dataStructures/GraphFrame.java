/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dataStructures;

import handlers.DataHandler;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.Timer;
import main.Home;

/**
 *
 * @author jhnyx
 */
public class GraphFrame extends javax.swing.JFrame {
    
    private Home home;

    /**
     * Creates new form GraphFrame
     */
    public GraphFrame() {
        initComponents();
        
        home = new Home();
    }
    
    private void switchLayouts(JPanel pInput, JPanel pOutput) {

        // Get a reference to the CardLayout of the pInput panel
        CardLayout InputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        InputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout OutputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        OutputLayout.show(pOutput, "OLoading");

        // Set up a timer to switch back to the main menus after a delay
        Timer timer = new Timer(500, (ActionEvent e) -> {
            InputLayout.show(pInput, "Menus");
            OutputLayout.show(pOutput, "OIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pContainer = new javax.swing.JPanel();
        pGraph = new javax.swing.JPanel();
        pGraphIntro = new javax.swing.JPanel();
        pSTop9 = new javax.swing.JPanel();
        bBack7 = new javax.swing.JButton();
        sTitle10 = new javax.swing.JLabel();
        bNext7 = new javax.swing.JButton();
        pSCenter16 = new javax.swing.JPanel();
        structImg7 = new javax.swing.JLabel();
        pSCenter17 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        pSBot9 = new javax.swing.JPanel();
        pLoading = new javax.swing.JPanel();
        pSTop11 = new javax.swing.JPanel();
        pSCenter19 = new javax.swing.JPanel();
        bArrays1 = new javax.swing.JButton();
        pSBot11 = new javax.swing.JPanel();
        pGraphOperations = new javax.swing.JPanel();
        pSTop12 = new javax.swing.JPanel();
        bBack9 = new javax.swing.JButton();
        sTitle12 = new javax.swing.JLabel();
        bHome = new javax.swing.JButton();
        pSCenter20 = new javax.swing.JPanel();
        pInput = new javax.swing.JPanel();
        pMenus = new javax.swing.JPanel();
        bDepthSearch = new javax.swing.JButton();
        bBreadthSearch = new javax.swing.JButton();
        pILoading = new javax.swing.JPanel();
        bArrays3 = new javax.swing.JButton();
        pDepthMenu = new javax.swing.JPanel();
        pSTop17 = new javax.swing.JPanel();
        bSearchBack = new javax.swing.JButton();
        pSCenter23 = new javax.swing.JPanel();
        bSearchTitle = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        pSBot15 = new javax.swing.JPanel();
        bDepth = new javax.swing.JButton();
        pBreadthMenu = new javax.swing.JPanel();
        pSTop18 = new javax.swing.JPanel();
        bSearchBack1 = new javax.swing.JButton();
        pSCenter24 = new javax.swing.JPanel();
        bSearchTitle1 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        pSBot16 = new javax.swing.JPanel();
        bBreadth = new javax.swing.JButton();
        pOutput = new javax.swing.JPanel();
        pOIntro = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        pOLoading = new javax.swing.JPanel();
        bArrays2 = new javax.swing.JButton();
        pDepthIntro = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextArea18 = new javax.swing.JTextArea();
        pDepthOutput = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        depthOutputArea = new javax.swing.JTextArea();
        pBreadthIntro = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTextArea19 = new javax.swing.JTextArea();
        pBreadthOutput = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        breadthOutputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        pContainer.setLayout(new java.awt.BorderLayout());

        pGraph.setMaximumSize(new java.awt.Dimension(1280, 720));
        pGraph.setRequestFocusEnabled(false);
        pGraph.setLayout(new java.awt.CardLayout());

        pGraphIntro.setBackground(new java.awt.Color(35, 40, 50));
        pGraphIntro.setMinimumSize(new java.awt.Dimension(1280, 720));
        pGraphIntro.setPreferredSize(new java.awt.Dimension(1280, 720));
        pGraphIntro.setLayout(new java.awt.BorderLayout());

        pSTop9.setBackground(new java.awt.Color(24, 25, 28));
        pSTop9.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack7.setBackground(new java.awt.Color(24, 25, 28));
        bBack7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack7.setBorder(null);
        bBack7.setBorderPainted(false);
        bBack7.setContentAreaFilled(false);
        bBack7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack7.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack7ActionPerformed(evt);
            }
        });
        pSTop9.add(bBack7);

        sTitle10.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle10.setForeground(new java.awt.Color(255, 255, 255));
        sTitle10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle10.setText("GRAPH");
        sTitle10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle10.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle10.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle10.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle10.setRequestFocusEnabled(false);
        pSTop9.add(sTitle10);

        bNext7.setBackground(new java.awt.Color(24, 25, 28));
        bNext7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/next_icon.png"))); // NOI18N
        bNext7.setBorder(null);
        bNext7.setBorderPainted(false);
        bNext7.setContentAreaFilled(false);
        bNext7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bNext7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_next_icon.png"))); // NOI18N
        bNext7.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bNext7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNext7ActionPerformed(evt);
            }
        });
        pSTop9.add(bNext7);

        pGraphIntro.add(pSTop9, java.awt.BorderLayout.PAGE_START);

        pSCenter16.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter16.setLayout(new java.awt.BorderLayout());

        structImg7.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        structImg7.setForeground(new java.awt.Color(255, 255, 255));
        structImg7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        structImg7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/graphs_gif.gif"))); // NOI18N
        structImg7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pSCenter16.add(structImg7, java.awt.BorderLayout.WEST);

        pSCenter17.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 50));

        jScrollPane8.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane8.setBorder(null);
        jScrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane8.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane8.setHorizontalScrollBar(null);
        jScrollPane8.setOpaque(false);
        jScrollPane8.setPreferredSize(new java.awt.Dimension(750, 1000));

        jTextArea8.setEditable(false);
        jTextArea8.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea8.setColumns(20);
        jTextArea8.setFont(new java.awt.Font("Russo One", 0, 22)); // NOI18N
        jTextArea8.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea8.setLineWrap(true);
        jTextArea8.setText("Graphs are used in various applications, such as social networks, transportation networks, and electrical circuits. They can be implemented in different ways, including adjacency lists and adjacency matrices.\n\nGraph algorithms are used to solve various problems, such as finding the shortest path between two vertices, identifying cycles in the graph, and determining the connectivity of the graph. Some popular graph algorithms include depth-first search, breadth-first search, and Dijkstra's algorithm.\n\nUnderstanding graphs and their properties is essential for designing and implementing efficient algorithms and data structures. They offer a powerful way to represent and manipulate complex relationships between data objects.");
        jTextArea8.setWrapStyleWord(true);
        jTextArea8.setAutoscrolls(false);
        jTextArea8.setBorder(null);
        jTextArea8.setFocusable(false);
        jTextArea8.setHighlighter(null);
        jScrollPane8.setViewportView(jTextArea8);

        pSCenter17.add(jScrollPane8);

        pSCenter16.add(pSCenter17, java.awt.BorderLayout.CENTER);

        pGraphIntro.add(pSCenter16, java.awt.BorderLayout.CENTER);

        pSBot9.setBackground(new java.awt.Color(35, 40, 50));
        pSBot9.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pGraphIntro.add(pSBot9, java.awt.BorderLayout.SOUTH);

        pGraph.add(pGraphIntro, "GraphIntro");

        pLoading.setBackground(new java.awt.Color(35, 40, 50));
        pLoading.setMinimumSize(new java.awt.Dimension(1280, 720));
        pLoading.setPreferredSize(new java.awt.Dimension(1280, 720));
        pLoading.setLayout(new java.awt.BorderLayout());

        pSTop11.setBackground(new java.awt.Color(35, 40, 50));
        pSTop11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 25));
        pLoading.add(pSTop11, java.awt.BorderLayout.NORTH);

        pSCenter19.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter19.setLayout(new java.awt.GridLayout(1, 0));

        bArrays1.setBackground(new java.awt.Color(35, 40, 50));
        bArrays1.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays1.setForeground(new java.awt.Color(255, 255, 255));
        bArrays1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/loading_gif.gif"))); // NOI18N
        bArrays1.setText("LOADING...");
        bArrays1.setBorder(null);
        bArrays1.setBorderPainted(false);
        bArrays1.setContentAreaFilled(false);
        bArrays1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays1MouseExited(evt);
            }
        });
        bArrays1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays1ActionPerformed(evt);
            }
        });
        pSCenter19.add(bArrays1);

        pLoading.add(pSCenter19, java.awt.BorderLayout.CENTER);

        pSBot11.setBackground(new java.awt.Color(35, 40, 50));
        pSBot11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pLoading.add(pSBot11, java.awt.BorderLayout.SOUTH);

        pGraph.add(pLoading, "Loading");

        pGraphOperations.setBackground(new java.awt.Color(35, 40, 50));
        pGraphOperations.setMinimumSize(new java.awt.Dimension(1280, 720));
        pGraphOperations.setPreferredSize(new java.awt.Dimension(1280, 720));
        pGraphOperations.setLayout(new java.awt.BorderLayout());

        pSTop12.setBackground(new java.awt.Color(24, 25, 28));
        pSTop12.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack9.setBackground(new java.awt.Color(24, 25, 28));
        bBack9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack9.setBorder(null);
        bBack9.setBorderPainted(false);
        bBack9.setContentAreaFilled(false);
        bBack9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack9.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack9ActionPerformed(evt);
            }
        });
        pSTop12.add(bBack9);

        sTitle12.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle12.setForeground(new java.awt.Color(255, 255, 255));
        sTitle12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle12.setText("GRAPH OPERATIONS");
        sTitle12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle12.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle12.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle12.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle12.setRequestFocusEnabled(false);
        pSTop12.add(sTitle12);

        bHome.setBackground(new java.awt.Color(24, 25, 28));
        bHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/home_icon.png"))); // NOI18N
        bHome.setBorder(null);
        bHome.setBorderPainted(false);
        bHome.setContentAreaFilled(false);
        bHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bHome.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_home_icon.png"))); // NOI18N
        bHome.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });
        pSTop12.add(bHome);

        pGraphOperations.add(pSTop12, java.awt.BorderLayout.PAGE_START);

        pSCenter20.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 0));

        pInput.setBackground(new java.awt.Color(35, 40, 50));
        pInput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pInput.setForeground(new java.awt.Color(255, 255, 255));
        pInput.setPreferredSize(new java.awt.Dimension(550, 600));
        pInput.setLayout(new java.awt.CardLayout());

        pMenus.setBackground(new java.awt.Color(35, 40, 50));
        pMenus.setLayout(new java.awt.GridLayout(2, 0));

        bDepthSearch.setBackground(new java.awt.Color(35, 40, 50));
        bDepthSearch.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bDepthSearch.setForeground(new java.awt.Color(255, 255, 255));
        bDepthSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_peek_gif.gif"))); // NOI18N
        bDepthSearch.setText("DEPTH FIRST SEARCH");
        bDepthSearch.setBorder(null);
        bDepthSearch.setBorderPainted(false);
        bDepthSearch.setContentAreaFilled(false);
        bDepthSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bDepthSearch.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bDepthSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bDepthSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bDepthSearchMouseExited(evt);
            }
        });
        bDepthSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDepthSearchActionPerformed(evt);
            }
        });
        pMenus.add(bDepthSearch);

        bBreadthSearch.setBackground(new java.awt.Color(35, 40, 50));
        bBreadthSearch.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bBreadthSearch.setForeground(new java.awt.Color(255, 255, 255));
        bBreadthSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_search_gif.gif"))); // NOI18N
        bBreadthSearch.setText("BREADTH FIRST SEARCH");
        bBreadthSearch.setBorder(null);
        bBreadthSearch.setBorderPainted(false);
        bBreadthSearch.setContentAreaFilled(false);
        bBreadthSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBreadthSearch.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bBreadthSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bBreadthSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bBreadthSearchMouseExited(evt);
            }
        });
        bBreadthSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBreadthSearchActionPerformed(evt);
            }
        });
        pMenus.add(bBreadthSearch);

        pInput.add(pMenus, "Menus");

        pILoading.setBackground(new java.awt.Color(35, 40, 50));
        pILoading.setLayout(new java.awt.BorderLayout());

        bArrays3.setBackground(new java.awt.Color(35, 40, 50));
        bArrays3.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays3.setForeground(new java.awt.Color(255, 255, 255));
        bArrays3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays3.setText("LOADING...");
        bArrays3.setBorder(null);
        bArrays3.setBorderPainted(false);
        bArrays3.setContentAreaFilled(false);
        bArrays3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays3MouseExited(evt);
            }
        });
        bArrays3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays3ActionPerformed(evt);
            }
        });
        pILoading.add(bArrays3, java.awt.BorderLayout.CENTER);

        pInput.add(pILoading, "ILoading");

        pDepthMenu.setBackground(new java.awt.Color(35, 40, 50));
        pDepthMenu.setLayout(new java.awt.BorderLayout());

        pSTop17.setBackground(new java.awt.Color(35, 40, 50));
        pSTop17.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bSearchBack.setBackground(new java.awt.Color(24, 25, 28));
        bSearchBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bSearchBack.setBorder(null);
        bSearchBack.setBorderPainted(false);
        bSearchBack.setContentAreaFilled(false);
        bSearchBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchBack.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bSearchBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchBack.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bSearchBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchBackActionPerformed(evt);
            }
        });
        pSTop17.add(bSearchBack);

        pDepthMenu.add(pSTop17, java.awt.BorderLayout.NORTH);

        pSCenter23.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter23.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bSearchTitle.setBackground(new java.awt.Color(35, 40, 50));
        bSearchTitle.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSearchTitle.setForeground(new java.awt.Color(255, 255, 255));
        bSearchTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_peek_gif.gif"))); // NOI18N
        bSearchTitle.setText("DEPTH FIRST SEARCH");
        bSearchTitle.setBorder(null);
        bSearchTitle.setBorderPainted(false);
        bSearchTitle.setContentAreaFilled(false);
        bSearchTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchTitle.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bSearchTitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSearchTitleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSearchTitleMouseExited(evt);
            }
        });
        bSearchTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchTitleActionPerformed(evt);
            }
        });
        pSCenter23.add(bSearchTitle);

        jPanel15.setBackground(new java.awt.Color(35, 40, 50));
        jPanel15.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter23.add(jPanel15);

        jPanel16.setBackground(new java.awt.Color(35, 40, 50));
        jPanel16.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        pSCenter23.add(jPanel16);

        jPanel18.setBackground(new java.awt.Color(35, 40, 50));
        jPanel18.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter23.add(jPanel18);

        pDepthMenu.add(pSCenter23, java.awt.BorderLayout.CENTER);

        pSBot15.setBackground(new java.awt.Color(35, 40, 50));
        pSBot15.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bDepth.setBackground(new java.awt.Color(24, 25, 28));
        bDepth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bDepth.setBorder(null);
        bDepth.setBorderPainted(false);
        bDepth.setContentAreaFilled(false);
        bDepth.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bDepth.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bDepth.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bDepth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDepthActionPerformed(evt);
            }
        });
        pSBot15.add(bDepth);

        pDepthMenu.add(pSBot15, java.awt.BorderLayout.SOUTH);

        pInput.add(pDepthMenu, "DepthMenu");

        pBreadthMenu.setBackground(new java.awt.Color(35, 40, 50));
        pBreadthMenu.setLayout(new java.awt.BorderLayout());

        pSTop18.setBackground(new java.awt.Color(35, 40, 50));
        pSTop18.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bSearchBack1.setBackground(new java.awt.Color(24, 25, 28));
        bSearchBack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bSearchBack1.setBorder(null);
        bSearchBack1.setBorderPainted(false);
        bSearchBack1.setContentAreaFilled(false);
        bSearchBack1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchBack1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bSearchBack1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchBack1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bSearchBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchBack1ActionPerformed(evt);
            }
        });
        pSTop18.add(bSearchBack1);

        pBreadthMenu.add(pSTop18, java.awt.BorderLayout.NORTH);

        pSCenter24.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter24.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bSearchTitle1.setBackground(new java.awt.Color(35, 40, 50));
        bSearchTitle1.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSearchTitle1.setForeground(new java.awt.Color(255, 255, 255));
        bSearchTitle1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_search_gif.gif"))); // NOI18N
        bSearchTitle1.setText("BREADTH FIRST SEARCH");
        bSearchTitle1.setBorder(null);
        bSearchTitle1.setBorderPainted(false);
        bSearchTitle1.setContentAreaFilled(false);
        bSearchTitle1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchTitle1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchTitle1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bSearchTitle1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSearchTitle1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSearchTitle1MouseExited(evt);
            }
        });
        bSearchTitle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchTitle1ActionPerformed(evt);
            }
        });
        pSCenter24.add(bSearchTitle1);

        jPanel19.setBackground(new java.awt.Color(35, 40, 50));
        jPanel19.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter24.add(jPanel19);

        jPanel20.setBackground(new java.awt.Color(35, 40, 50));
        jPanel20.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        pSCenter24.add(jPanel20);

        jPanel21.setBackground(new java.awt.Color(35, 40, 50));
        jPanel21.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter24.add(jPanel21);

        jPanel22.setBackground(new java.awt.Color(35, 40, 50));
        jPanel22.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter24.add(jPanel22);

        pBreadthMenu.add(pSCenter24, java.awt.BorderLayout.CENTER);

        pSBot16.setBackground(new java.awt.Color(35, 40, 50));
        pSBot16.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bBreadth.setBackground(new java.awt.Color(24, 25, 28));
        bBreadth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bBreadth.setBorder(null);
        bBreadth.setBorderPainted(false);
        bBreadth.setContentAreaFilled(false);
        bBreadth.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBreadth.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bBreadth.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bBreadth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBreadthActionPerformed(evt);
            }
        });
        pSBot16.add(bBreadth);

        pBreadthMenu.add(pSBot16, java.awt.BorderLayout.SOUTH);

        pInput.add(pBreadthMenu, "BreadthMenu");

        pSCenter20.add(pInput);

        pOutput.setBackground(new java.awt.Color(35, 40, 50));
        pOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OUTPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pOutput.setForeground(new java.awt.Color(255, 255, 255));
        pOutput.setPreferredSize(new java.awt.Dimension(550, 600));
        pOutput.setLayout(new java.awt.CardLayout());

        pOIntro.setBackground(new java.awt.Color(35, 40, 50));
        pOIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane12.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane12.setBorder(null);
        jScrollPane12.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane12.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane12.setHorizontalScrollBar(null);
        jScrollPane12.setOpaque(false);
        jScrollPane12.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane12.setRequestFocusEnabled(false);
        jScrollPane12.setWheelScrollingEnabled(false);

        jTextArea12.setEditable(false);
        jTextArea12.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea12.setColumns(20);
        jTextArea12.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea12.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea12.setLineWrap(true);
        jTextArea12.setText("Hey there, curious clicker! Want to know more about the buttons on this screen? Well, it's as easy as a single click or tap! Just pick a button on the left that piques your interest and voila! A magical description will appear before your very eyes! It's like having a button whisperer in your pocket! This nifty feature is here to help you navigate and understand this interface, so don't be shy, give those buttons a click and unlock their secrets!");
        jTextArea12.setWrapStyleWord(true);
        jTextArea12.setAutoscrolls(false);
        jTextArea12.setBorder(null);
        jTextArea12.setFocusable(false);
        jTextArea12.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane12.setViewportView(jTextArea12);

        pOIntro.add(jScrollPane12, java.awt.BorderLayout.CENTER);

        pOutput.add(pOIntro, "OIntro");

        pOLoading.setBackground(new java.awt.Color(35, 40, 50));
        pOLoading.setLayout(new java.awt.BorderLayout());

        bArrays2.setBackground(new java.awt.Color(35, 40, 50));
        bArrays2.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays2.setForeground(new java.awt.Color(255, 255, 255));
        bArrays2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays2.setText("LOADING...");
        bArrays2.setBorder(null);
        bArrays2.setBorderPainted(false);
        bArrays2.setContentAreaFilled(false);
        bArrays2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays2MouseExited(evt);
            }
        });
        bArrays2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays2ActionPerformed(evt);
            }
        });
        pOLoading.add(bArrays2, java.awt.BorderLayout.CENTER);

        pOutput.add(pOLoading, "OLoading");

        pDepthIntro.setBackground(new java.awt.Color(35, 40, 50));
        pDepthIntro.setFocusable(false);
        pDepthIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane21.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane21.setBorder(null);
        jScrollPane21.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane21.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane21.setHorizontalScrollBar(null);
        jScrollPane21.setOpaque(false);
        jScrollPane21.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane21.setRequestFocusEnabled(false);
        jScrollPane21.setWheelScrollingEnabled(false);

        jTextArea18.setEditable(false);
        jTextArea18.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea18.setColumns(20);
        jTextArea18.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea18.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea18.setLineWrap(true);
        jTextArea18.setText("Depth First Search (DFS) is a popular graph traversal algorithm used to explore or search through a graph or tree data structure. It starts at a specified node and explores as far as possible along each branch before backtracking. \n\nThe algorithm maintains a stack to keep track of the nodes to be explored. It begins by visiting the initial node and then selects one of its adjacent unvisited nodes to explore further. This process continues until there are no more unvisited nodes, or the desired node or condition is found.\n\nDFS prioritizes going deeper into the graph before backtracking. It is implemented recursively or by using an explicit stack data structure. The algorithm can be used to solve various graph-related problems such as finding connected components, detecting cycles, or searching for a path between two nodes.\n\nOverall, DFS is a fundamental algorithm in graph theory and is widely used in applications like maze-solving, network analysis, and graph-based puzzles.");
        jTextArea18.setWrapStyleWord(true);
        jTextArea18.setAutoscrolls(false);
        jTextArea18.setBorder(null);
        jTextArea18.setFocusable(false);
        jTextArea18.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane21.setViewportView(jTextArea18);

        pDepthIntro.add(jScrollPane21, java.awt.BorderLayout.CENTER);

        pOutput.add(pDepthIntro, "DepthIntro");

        pDepthOutput.setBackground(new java.awt.Color(35, 40, 50));
        pDepthOutput.setFocusable(false);
        pDepthOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane23.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane23.setBorder(null);
        jScrollPane23.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane23.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane23.setHorizontalScrollBar(null);
        jScrollPane23.setOpaque(false);
        jScrollPane23.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane23.setRequestFocusEnabled(false);
        jScrollPane23.setWheelScrollingEnabled(false);

        depthOutputArea.setEditable(false);
        depthOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        depthOutputArea.setColumns(20);
        depthOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        depthOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        depthOutputArea.setLineWrap(true);
        depthOutputArea.setWrapStyleWord(true);
        depthOutputArea.setAutoscrolls(false);
        depthOutputArea.setBorder(null);
        depthOutputArea.setFocusable(false);
        depthOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane23.setViewportView(depthOutputArea);

        pDepthOutput.add(jScrollPane23, java.awt.BorderLayout.CENTER);

        pOutput.add(pDepthOutput, "DepthOutput");

        pBreadthIntro.setBackground(new java.awt.Color(35, 40, 50));
        pBreadthIntro.setFocusable(false);
        pBreadthIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane22.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane22.setBorder(null);
        jScrollPane22.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane22.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane22.setHorizontalScrollBar(null);
        jScrollPane22.setOpaque(false);
        jScrollPane22.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane22.setRequestFocusEnabled(false);
        jScrollPane22.setWheelScrollingEnabled(false);

        jTextArea19.setEditable(false);
        jTextArea19.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea19.setColumns(20);
        jTextArea19.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea19.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea19.setLineWrap(true);
        jTextArea19.setText("Breadth First Search (BFS) is another popular graph traversal algorithm used to explore or search through a graph or tree data structure. Unlike Depth First Search (DFS), which explores as deeply as possible before backtracking, BFS explores all the nodes at the current level before moving to the next level.\n\nThe algorithm starts at a specified node and visits all its adjacent nodes first. Then, it moves to the next level of nodes and visits their adjacent nodes, continuing this process until all nodes have been visited or until the desired node or condition is found.\n\nTo keep track of the nodes to be visited, BFS uses a queue data structure. The initial node is enqueued, and as each node is visited, its adjacent nodes are enqueued for further exploration. This ensures that nodes are visited in a breadth-first manner.\n\nBFS is useful for finding the shortest path between two nodes in an unweighted graph because it guarantees that nodes are visited in order of their distance from the starting node. It is also used in algorithms such as Dijkstra's algorithm for finding the shortest path in weighted graphs and Ford-Fulkerson algorithm for maximum flow in a network.");
        jTextArea19.setWrapStyleWord(true);
        jTextArea19.setAutoscrolls(false);
        jTextArea19.setBorder(null);
        jTextArea19.setFocusable(false);
        jTextArea19.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane22.setViewportView(jTextArea19);

        pBreadthIntro.add(jScrollPane22, java.awt.BorderLayout.CENTER);

        pOutput.add(pBreadthIntro, "BreadthIntro");

        pBreadthOutput.setBackground(new java.awt.Color(35, 40, 50));
        pBreadthOutput.setFocusable(false);
        pBreadthOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane24.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane24.setBorder(null);
        jScrollPane24.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane24.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane24.setHorizontalScrollBar(null);
        jScrollPane24.setOpaque(false);
        jScrollPane24.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane24.setRequestFocusEnabled(false);
        jScrollPane24.setWheelScrollingEnabled(false);

        breadthOutputArea.setEditable(false);
        breadthOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        breadthOutputArea.setColumns(20);
        breadthOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        breadthOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        breadthOutputArea.setLineWrap(true);
        breadthOutputArea.setWrapStyleWord(true);
        breadthOutputArea.setAutoscrolls(false);
        breadthOutputArea.setBorder(null);
        breadthOutputArea.setFocusable(false);
        breadthOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane24.setViewportView(breadthOutputArea);

        pBreadthOutput.add(jScrollPane24, java.awt.BorderLayout.CENTER);

        pOutput.add(pBreadthOutput, "BreadthOutput");

        pSCenter20.add(pOutput);

        pGraphOperations.add(pSCenter20, java.awt.BorderLayout.CENTER);

        pGraph.add(pGraphOperations, "GraphOperations");

        pContainer.add(pGraph, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bArrays1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays1MouseEntered

    private void bArrays1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays1MouseExited

    private void bArrays1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays1ActionPerformed

    private void bBack9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack9ActionPerformed
        CardLayout cardLayout = (CardLayout) pGraph.getLayout();
        cardLayout.show(pGraph, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pGraph, "GraphIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bBack9ActionPerformed

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pGraph.getLayout();
        cardLayout.show(pGraph, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bHomeActionPerformed

    private void bDepthSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bDepthSearchMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bDepthSearchMouseEntered

    private void bDepthSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bDepthSearchMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bDepthSearchMouseExited

    private void bDepthSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDepthSearchActionPerformed
         // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pOutput, "OLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pInput, "DepthMenu");
            outputLayout.show(pOutput, "DepthIntro");
        });
        timer.setRepeats(false);
        timer.start();      
    }//GEN-LAST:event_bDepthSearchActionPerformed

    private void bArrays3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays3MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays3MouseEntered

    private void bArrays3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays3MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays3MouseExited

    private void bArrays3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays3ActionPerformed

    private void bSearchBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchBackActionPerformed
        switchLayouts(pInput, pOutput);
    }//GEN-LAST:event_bSearchBackActionPerformed

    private void bSearchTitleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitleMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bSearchTitleMouseEntered

    private void bSearchTitleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitleMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bSearchTitleMouseExited

    private void bSearchTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchTitleActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();
        outputLayout.show(pOutput, "AOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pOutput, "ASearchIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSearchTitleActionPerformed

    private void bDepthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDepthActionPerformed
    // Get a reference to the CardLayout of the pOutput panel
    CardLayout outputLayout = (CardLayout) pOutput.getLayout();
    outputLayout.show(pOutput, "OLoading");

    // Perform the breadth-first search and obtain the result
    String result = performDepthFirstSearch(); 

    depthOutputArea.setText(result);

    Timer timer = new Timer(500, (ActionEvent e) -> {
        outputLayout.show(pOutput, "DepthOutput");
    });
    timer.setRepeats(false);
    timer.start();
    }//GEN-LAST:event_bDepthActionPerformed
    
    private String performDepthFirstSearch() {
    // Create an instance of DataHandler
    DataHandler dataHandler = new DataHandler();

    // Define the graph as an adjacency matrix
        int[][] graph = {
        {0, 1, 0, 1, 0},
        {1, 0, 1, 0, 0},
        {0, 1, 0, 0, 1},
        {1, 0, 0, 0, 1},
        {0, 0, 1, 1, 0}
    };


    // Set the start vertex for depth-first search
    int startVertex = 0;

    // Perform depth-first search
    String dfsResult = dataHandler.depthFirstSearch(graph, startVertex);
    
    // Create a string representation of the adjacency matrix
    StringBuilder adjacencyMatrix = new StringBuilder();
    for (int i = 0; i < graph.length; i++) {
        adjacencyMatrix.append(Arrays.toString(graph[i])).append("\n");
    }

    // Combine the adjacency matrix and DFS result
    String output = "Adjacency Matrix:\n" + adjacencyMatrix.toString() + "\nDFS Result:\n" + dfsResult;

    return output;
}
    
    
    private void bArrays2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays2MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays2MouseEntered

    private void bArrays2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays2MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays2MouseExited

    private void bArrays2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays2ActionPerformed

    private void bBack7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack7ActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pGraph.getLayout();
        cardLayout.show(pGraph, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bBack7ActionPerformed

    private void bNext7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNext7ActionPerformed
            CardLayout cardLayout = (CardLayout) pGraph.getLayout();
        cardLayout.show(pGraph, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pGraph, "GraphOperations");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bNext7ActionPerformed

    private void bBreadthSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bBreadthSearchMouseEntered
    home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bBreadthSearchMouseEntered

    private void bBreadthSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bBreadthSearchMouseExited
    home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bBreadthSearchMouseExited

    private void bBreadthSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBreadthSearchActionPerformed
    // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pOutput, "OLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pInput, "BreadthMenu");
            outputLayout.show(pOutput, "BreadthIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bBreadthSearchActionPerformed

    private void bSearchBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchBack1ActionPerformed
    switchLayouts(pInput, pOutput);
    }//GEN-LAST:event_bSearchBack1ActionPerformed

    private void bSearchTitle1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitle1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle1MouseEntered

    private void bSearchTitle1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitle1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle1MouseExited

    private void bSearchTitle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchTitle1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle1ActionPerformed

    private void bBreadthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBreadthActionPerformed
    // Get a reference to the CardLayout of the pOutput panel
    CardLayout outputLayout = (CardLayout) pOutput.getLayout();
    outputLayout.show(pOutput, "OLoading");

    // Perform the breadth-first search and obtain the result
    String result = performBreadthFirstSearch(); // Replace this with your actual breadth-first search code

    breadthOutputArea.setText(result);

    Timer timer = new Timer(500, (ActionEvent e) -> {
        outputLayout.show(pOutput, "BreadthOutput");
    });
    timer.setRepeats(false);
    timer.start();
    }//GEN-LAST:event_bBreadthActionPerformed
    
    private String performBreadthFirstSearch() {
    // Create an instance of DataHandler
    DataHandler dataHandler = new DataHandler();

    // Define the graph as an adjacency matrix
    int[][] graph = {
        {0, 1, 1, 0, 0, 0},
        {1, 0, 0, 1, 1, 0},
        {1, 0, 0, 0, 1, 1},
        {0, 1, 0, 0, 0, 1},
        {0, 1, 1, 0, 0, 1},
        {0, 0, 1, 1, 1, 0}
    };

    // Set the start vertex for breadth-first search
    int startVertex = 0;

    // Perform breadth-first search
    String bfsResult = dataHandler.breadthFirstSearch(graph, startVertex);
    
    // Create a string representation of the adjacency matrix
    StringBuilder adjacencyMatrix = new StringBuilder();
    for (int i = 0; i < graph.length; i++) {
        adjacencyMatrix.append(Arrays.toString(graph[i])).append("\n");
    }

    // Combine the adjacency matrix and BFS result
    String output = "Adjacency Matrix:\n" + adjacencyMatrix.toString() + "\nBFS Result:\n" + bfsResult;

    return output;
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bArrays1;
    private javax.swing.JButton bArrays2;
    private javax.swing.JButton bArrays3;
    private javax.swing.JButton bBack7;
    private javax.swing.JButton bBack9;
    private javax.swing.JButton bBreadth;
    private javax.swing.JButton bBreadthSearch;
    private javax.swing.JButton bDepth;
    private javax.swing.JButton bDepthSearch;
    private javax.swing.JButton bHome;
    private javax.swing.JButton bNext7;
    private javax.swing.JButton bSearchBack;
    private javax.swing.JButton bSearchBack1;
    private javax.swing.JButton bSearchTitle;
    private javax.swing.JButton bSearchTitle1;
    private javax.swing.JTextArea breadthOutputArea;
    private javax.swing.JTextArea depthOutputArea;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea18;
    private javax.swing.JTextArea jTextArea19;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JPanel pBreadthIntro;
    private javax.swing.JPanel pBreadthMenu;
    private javax.swing.JPanel pBreadthOutput;
    private javax.swing.JPanel pContainer;
    private javax.swing.JPanel pDepthIntro;
    private javax.swing.JPanel pDepthMenu;
    private javax.swing.JPanel pDepthOutput;
    private javax.swing.JPanel pGraph;
    private javax.swing.JPanel pGraphIntro;
    private javax.swing.JPanel pGraphOperations;
    private javax.swing.JPanel pILoading;
    private javax.swing.JPanel pInput;
    private javax.swing.JPanel pLoading;
    private javax.swing.JPanel pMenus;
    private javax.swing.JPanel pOIntro;
    private javax.swing.JPanel pOLoading;
    private javax.swing.JPanel pOutput;
    private javax.swing.JPanel pSBot11;
    private javax.swing.JPanel pSBot15;
    private javax.swing.JPanel pSBot16;
    private javax.swing.JPanel pSBot9;
    private javax.swing.JPanel pSCenter16;
    private javax.swing.JPanel pSCenter17;
    private javax.swing.JPanel pSCenter19;
    private javax.swing.JPanel pSCenter20;
    private javax.swing.JPanel pSCenter23;
    private javax.swing.JPanel pSCenter24;
    private javax.swing.JPanel pSTop11;
    private javax.swing.JPanel pSTop12;
    private javax.swing.JPanel pSTop17;
    private javax.swing.JPanel pSTop18;
    private javax.swing.JPanel pSTop9;
    private javax.swing.JLabel sTitle10;
    private javax.swing.JLabel sTitle12;
    private javax.swing.JLabel structImg7;
    // End of variables declaration//GEN-END:variables
}
