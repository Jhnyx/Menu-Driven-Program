/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dataStructures;

import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import javax.swing.*;
import handlers.DataHandler;
import handlers.FileHandler;
import java.util.LinkedList;
import java.util.Queue;
import main.Home;

/**
 *
 * @author jhnyx
 */
public class QueueFrame extends javax.swing.JFrame {

    private Home home;

    /**
     * Creates new form QueueFrame
     */
    public QueueFrame() {
        initComponents();
        home = new Home();
    }

    private void switchQueueLayouts(JPanel pQInput, JPanel pQOutput) {
        /* Stack Operations Panels */
        // Get a reference to the CardLayout of the SMenus panel
        CardLayout InputLayout = (CardLayout) pQInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        InputLayout.show(pQInput, "QILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout OutputLayout = (CardLayout) pQOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        OutputLayout.show(pQOutput, "QOLoading");

        // Set up a timer to switch back to the main menus after a delay
        Timer timer = new Timer(500, (ActionEvent e) -> {
            InputLayout.show(pQInput, "QMenus");
            OutputLayout.show(pQOutput, "QOIntro");
        });

        timer.setRepeats(false);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pContainer = new javax.swing.JPanel();
        pQueue = new javax.swing.JPanel();
        pQueuesIntro = new javax.swing.JPanel();
        pSTop4 = new javax.swing.JPanel();
        bBack2 = new javax.swing.JButton();
        sTitle5 = new javax.swing.JLabel();
        bNext2 = new javax.swing.JButton();
        pSCenter6 = new javax.swing.JPanel();
        structImg2 = new javax.swing.JLabel();
        pSCenter7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        pSBot4 = new javax.swing.JPanel();
        pLoading = new javax.swing.JPanel();
        pSTop11 = new javax.swing.JPanel();
        pSCenter19 = new javax.swing.JPanel();
        bArrays1 = new javax.swing.JButton();
        pSBot11 = new javax.swing.JPanel();
        pQueueOperations = new javax.swing.JPanel();
        pSTop19 = new javax.swing.JPanel();
        bBack11 = new javax.swing.JButton();
        sTitle14 = new javax.swing.JLabel();
        bHome = new javax.swing.JButton();
        pSCenter26 = new javax.swing.JPanel();
        pQInput = new javax.swing.JPanel();
        pQMenus = new javax.swing.JPanel();
        bQueueEnqueue = new javax.swing.JButton();
        bQueueDequeue = new javax.swing.JButton();
        bQueuePeek = new javax.swing.JButton();
        pQILoading = new javax.swing.JPanel();
        bArrays6 = new javax.swing.JButton();
        pQEnqueue = new javax.swing.JPanel();
        pSTop23 = new javax.swing.JPanel();
        bInsertBack4 = new javax.swing.JButton();
        pSCenter30 = new javax.swing.JPanel();
        bInsertionTitle4 = new javax.swing.JButton();
        jPanel37 = new javax.swing.JPanel();
        bSDisplay3 = new javax.swing.JButton();
        jPanel38 = new javax.swing.JPanel();
        bEInsert3 = new javax.swing.JButton();
        jPanel39 = new javax.swing.JPanel();
        qEValue = new javax.swing.JTextField();
        jPanel40 = new javax.swing.JPanel();
        bSReset1 = new javax.swing.JButton();
        pSBot20 = new javax.swing.JPanel();
        bEnqueue = new javax.swing.JButton();
        pQDequeue = new javax.swing.JPanel();
        pSTop24 = new javax.swing.JPanel();
        bInsertBack5 = new javax.swing.JButton();
        pSCenter31 = new javax.swing.JPanel();
        bInsertionTitle5 = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        bSDisplay4 = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        pSBot21 = new javax.swing.JPanel();
        bDequeue = new javax.swing.JButton();
        pQPeek = new javax.swing.JPanel();
        pSTop25 = new javax.swing.JPanel();
        bInsertBack6 = new javax.swing.JButton();
        pSCenter32 = new javax.swing.JPanel();
        bInsertionTitle6 = new javax.swing.JButton();
        jPanel44 = new javax.swing.JPanel();
        bSDisplay5 = new javax.swing.JButton();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        pSBot22 = new javax.swing.JPanel();
        bqPeek = new javax.swing.JButton();
        pQOutput = new javax.swing.JPanel();
        pQOIntro = new javax.swing.JPanel();
        jScrollPane28 = new javax.swing.JScrollPane();
        jTextArea23 = new javax.swing.JTextArea();
        pQOLoading = new javax.swing.JPanel();
        bArrays7 = new javax.swing.JButton();
        pQEnqueueIntro = new javax.swing.JPanel();
        jScrollPane32 = new javax.swing.JScrollPane();
        jTextArea26 = new javax.swing.JTextArea();
        pQEnqueueOutput = new javax.swing.JPanel();
        jScrollPane38 = new javax.swing.JScrollPane();
        enqueueOutputArea = new javax.swing.JTextArea();
        pQDequeueIntro = new javax.swing.JPanel();
        jScrollPane39 = new javax.swing.JScrollPane();
        jTextArea29 = new javax.swing.JTextArea();
        pQDequeueOutput = new javax.swing.JPanel();
        jScrollPane40 = new javax.swing.JScrollPane();
        dequeueOutputArea = new javax.swing.JTextArea();
        pQPeekIntro = new javax.swing.JPanel();
        jScrollPane41 = new javax.swing.JScrollPane();
        jTextArea30 = new javax.swing.JTextArea();
        pQPeekOutput = new javax.swing.JPanel();
        jScrollPane42 = new javax.swing.JScrollPane();
        qPeekOutputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        pContainer.setLayout(new java.awt.BorderLayout());

        pQueue.setMaximumSize(new java.awt.Dimension(1280, 720));
        pQueue.setRequestFocusEnabled(false);
        pQueue.setLayout(new java.awt.CardLayout());

        pQueuesIntro.setBackground(new java.awt.Color(35, 40, 50));
        pQueuesIntro.setMinimumSize(new java.awt.Dimension(1280, 720));
        pQueuesIntro.setPreferredSize(new java.awt.Dimension(1280, 720));
        pQueuesIntro.setLayout(new java.awt.BorderLayout());

        pSTop4.setBackground(new java.awt.Color(24, 25, 28));
        pSTop4.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack2.setBackground(new java.awt.Color(24, 25, 28));
        bBack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack2.setBorder(null);
        bBack2.setBorderPainted(false);
        bBack2.setContentAreaFilled(false);
        bBack2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack2ActionPerformed(evt);
            }
        });
        pSTop4.add(bBack2);

        sTitle5.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle5.setForeground(new java.awt.Color(255, 255, 255));
        sTitle5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle5.setText("QUEUES");
        sTitle5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle5.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle5.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle5.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle5.setRequestFocusEnabled(false);
        pSTop4.add(sTitle5);

        bNext2.setBackground(new java.awt.Color(24, 25, 28));
        bNext2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/next_icon.png"))); // NOI18N
        bNext2.setBorder(null);
        bNext2.setBorderPainted(false);
        bNext2.setContentAreaFilled(false);
        bNext2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bNext2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_next_icon.png"))); // NOI18N
        bNext2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNext2ActionPerformed(evt);
            }
        });
        pSTop4.add(bNext2);

        pQueuesIntro.add(pSTop4, java.awt.BorderLayout.PAGE_START);

        pSCenter6.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter6.setLayout(new java.awt.BorderLayout());

        structImg2.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        structImg2.setForeground(new java.awt.Color(255, 255, 255));
        structImg2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        structImg2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/queues_gif.gif"))); // NOI18N
        structImg2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pSCenter6.add(structImg2, java.awt.BorderLayout.WEST);

        pSCenter7.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 25));

        jScrollPane3.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setHorizontalScrollBar(null);
        jScrollPane3.setOpaque(false);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(750, 1000));

        jTextArea3.setEditable(false);
        jTextArea3.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Russo One", 0, 22)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea3.setLineWrap(true);
        jTextArea3.setText("A queue is a data structure in programming that operates in a first-in, first-out (FIFO) manner. This means that the first element added to the queue is the first to be removed from it.\n\nThe primary operations performed on a queue are enqueue, which adds an element to the back of the queue, and dequeue, which removes the element from the front of the queue. Additional operations include peeking at the front element without removing it and checking if the queue is empty.\n\nQueues are used in programming for a wide variety of applications, including scheduling tasks, buffering data, and simulating processes. They can be implemented using an array or a linked list, and can have a fixed capacity or grow dynamically. Overall, queues are a simple and efficient data structure used widely in programming.");
        jTextArea3.setWrapStyleWord(true);
        jTextArea3.setAutoscrolls(false);
        jTextArea3.setBorder(null);
        jTextArea3.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea3);

        pSCenter7.add(jScrollPane3);

        pSCenter6.add(pSCenter7, java.awt.BorderLayout.CENTER);

        pQueuesIntro.add(pSCenter6, java.awt.BorderLayout.CENTER);

        pSBot4.setBackground(new java.awt.Color(35, 40, 50));
        pSBot4.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pQueuesIntro.add(pSBot4, java.awt.BorderLayout.SOUTH);

        pQueue.add(pQueuesIntro, "QueuesIntro");

        pLoading.setBackground(new java.awt.Color(35, 40, 50));
        pLoading.setMinimumSize(new java.awt.Dimension(1280, 720));
        pLoading.setPreferredSize(new java.awt.Dimension(1280, 720));
        pLoading.setLayout(new java.awt.BorderLayout());

        pSTop11.setBackground(new java.awt.Color(35, 40, 50));
        pSTop11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 25));
        pLoading.add(pSTop11, java.awt.BorderLayout.NORTH);

        pSCenter19.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter19.setLayout(new java.awt.GridLayout(1, 0));

        bArrays1.setBackground(new java.awt.Color(35, 40, 50));
        bArrays1.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays1.setForeground(new java.awt.Color(255, 255, 255));
        bArrays1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/loading_gif.gif"))); // NOI18N
        bArrays1.setText("LOADING...");
        bArrays1.setBorder(null);
        bArrays1.setBorderPainted(false);
        bArrays1.setContentAreaFilled(false);
        bArrays1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays1MouseExited(evt);
            }
        });
        bArrays1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays1ActionPerformed(evt);
            }
        });
        pSCenter19.add(bArrays1);

        pLoading.add(pSCenter19, java.awt.BorderLayout.CENTER);

        pSBot11.setBackground(new java.awt.Color(35, 40, 50));
        pSBot11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pLoading.add(pSBot11, java.awt.BorderLayout.SOUTH);

        pQueue.add(pLoading, "Loading");

        pQueueOperations.setBackground(new java.awt.Color(35, 40, 50));
        pQueueOperations.setMinimumSize(new java.awt.Dimension(1280, 720));
        pQueueOperations.setPreferredSize(new java.awt.Dimension(1280, 720));
        pQueueOperations.setLayout(new java.awt.BorderLayout());

        pSTop19.setBackground(new java.awt.Color(24, 25, 28));
        pSTop19.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack11.setBackground(new java.awt.Color(24, 25, 28));
        bBack11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack11.setBorder(null);
        bBack11.setBorderPainted(false);
        bBack11.setContentAreaFilled(false);
        bBack11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack11.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack11.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack11ActionPerformed(evt);
            }
        });
        pSTop19.add(bBack11);

        sTitle14.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle14.setForeground(new java.awt.Color(255, 255, 255));
        sTitle14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle14.setText("QUEUE OPERATIONS");
        sTitle14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle14.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle14.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle14.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle14.setRequestFocusEnabled(false);
        pSTop19.add(sTitle14);

        bHome.setBackground(new java.awt.Color(24, 25, 28));
        bHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/home_icon.png"))); // NOI18N
        bHome.setBorder(null);
        bHome.setBorderPainted(false);
        bHome.setContentAreaFilled(false);
        bHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bHome.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_home_icon.png"))); // NOI18N
        bHome.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });
        pSTop19.add(bHome);

        pQueueOperations.add(pSTop19, java.awt.BorderLayout.PAGE_START);

        pSCenter26.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 0));

        pQInput.setBackground(new java.awt.Color(35, 40, 50));
        pQInput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pQInput.setForeground(new java.awt.Color(255, 255, 255));
        pQInput.setPreferredSize(new java.awt.Dimension(550, 600));
        pQInput.setLayout(new java.awt.CardLayout());

        pQMenus.setBackground(new java.awt.Color(35, 40, 50));
        pQMenus.setLayout(new java.awt.GridLayout(3, 0));

        bQueueEnqueue.setBackground(new java.awt.Color(35, 40, 50));
        bQueueEnqueue.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bQueueEnqueue.setForeground(new java.awt.Color(255, 255, 255));
        bQueueEnqueue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_push_gif.gif"))); // NOI18N
        bQueueEnqueue.setText("ENQUEUE");
        bQueueEnqueue.setBorder(null);
        bQueueEnqueue.setBorderPainted(false);
        bQueueEnqueue.setContentAreaFilled(false);
        bQueueEnqueue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bQueueEnqueue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bQueueEnqueue.setPreferredSize(new java.awt.Dimension(200, 100));
        bQueueEnqueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bQueueEnqueueMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bQueueEnqueueMouseExited(evt);
            }
        });
        bQueueEnqueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQueueEnqueueActionPerformed(evt);
            }
        });
        pQMenus.add(bQueueEnqueue);

        bQueueDequeue.setBackground(new java.awt.Color(35, 40, 50));
        bQueueDequeue.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bQueueDequeue.setForeground(new java.awt.Color(255, 255, 255));
        bQueueDequeue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_updation_gif.gif"))); // NOI18N
        bQueueDequeue.setText("DEQUEUE");
        bQueueDequeue.setBorder(null);
        bQueueDequeue.setBorderPainted(false);
        bQueueDequeue.setContentAreaFilled(false);
        bQueueDequeue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bQueueDequeue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bQueueDequeue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bQueueDequeueMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bQueueDequeueMouseExited(evt);
            }
        });
        bQueueDequeue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQueueDequeueActionPerformed(evt);
            }
        });
        pQMenus.add(bQueueDequeue);

        bQueuePeek.setBackground(new java.awt.Color(35, 40, 50));
        bQueuePeek.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bQueuePeek.setForeground(new java.awt.Color(255, 255, 255));
        bQueuePeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_peek_gif.gif"))); // NOI18N
        bQueuePeek.setText("PEEK");
        bQueuePeek.setBorder(null);
        bQueuePeek.setBorderPainted(false);
        bQueuePeek.setContentAreaFilled(false);
        bQueuePeek.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bQueuePeek.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bQueuePeek.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bQueuePeekMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bQueuePeekMouseExited(evt);
            }
        });
        bQueuePeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQueuePeekActionPerformed(evt);
            }
        });
        pQMenus.add(bQueuePeek);

        pQInput.add(pQMenus, "QMenus");

        pQILoading.setBackground(new java.awt.Color(35, 40, 50));
        pQILoading.setLayout(new java.awt.BorderLayout());

        bArrays6.setBackground(new java.awt.Color(35, 40, 50));
        bArrays6.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays6.setForeground(new java.awt.Color(255, 255, 255));
        bArrays6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays6.setText("LOADING...");
        bArrays6.setBorder(null);
        bArrays6.setBorderPainted(false);
        bArrays6.setContentAreaFilled(false);
        bArrays6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays6MouseExited(evt);
            }
        });
        bArrays6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays6ActionPerformed(evt);
            }
        });
        pQILoading.add(bArrays6, java.awt.BorderLayout.CENTER);

        pQInput.add(pQILoading, "QILoading");

        pQEnqueue.setBackground(new java.awt.Color(35, 40, 50));
        pQEnqueue.setLayout(new java.awt.BorderLayout());

        pSTop23.setBackground(new java.awt.Color(35, 40, 50));
        pSTop23.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bInsertBack4.setBackground(new java.awt.Color(24, 25, 28));
        bInsertBack4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bInsertBack4.setBorder(null);
        bInsertBack4.setBorderPainted(false);
        bInsertBack4.setContentAreaFilled(false);
        bInsertBack4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertBack4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bInsertBack4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertBack4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bInsertBack4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertBack4ActionPerformed(evt);
            }
        });
        pSTop23.add(bInsertBack4);

        pQEnqueue.add(pSTop23, java.awt.BorderLayout.NORTH);

        pSCenter30.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter30.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bInsertionTitle4.setBackground(new java.awt.Color(35, 40, 50));
        bInsertionTitle4.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bInsertionTitle4.setForeground(new java.awt.Color(255, 255, 255));
        bInsertionTitle4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_push_gif.gif"))); // NOI18N
        bInsertionTitle4.setText("ENQUEUE");
        bInsertionTitle4.setBorder(null);
        bInsertionTitle4.setBorderPainted(false);
        bInsertionTitle4.setContentAreaFilled(false);
        bInsertionTitle4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertionTitle4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertionTitle4.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bInsertionTitle4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInsertionTitle4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInsertionTitle4MouseExited(evt);
            }
        });
        bInsertionTitle4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertionTitle4ActionPerformed(evt);
            }
        });
        pSCenter30.add(bInsertionTitle4);

        jPanel37.setBackground(new java.awt.Color(35, 40, 50));
        jPanel37.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter30.add(jPanel37);

        bSDisplay3.setBackground(new java.awt.Color(35, 40, 50));
        bSDisplay3.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSDisplay3.setForeground(new java.awt.Color(255, 255, 255));
        bSDisplay3.setText("DISPLAY");
        bSDisplay3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSDisplay3.setContentAreaFilled(false);
        bSDisplay3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSDisplay3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSDisplay3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSDisplay3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSDisplay3MouseExited(evt);
            }
        });
        bSDisplay3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSDisplay3ActionPerformed(evt);
            }
        });
        pSCenter30.add(bSDisplay3);

        jPanel38.setBackground(new java.awt.Color(35, 40, 50));
        jPanel38.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel38Layout = new javax.swing.GroupLayout(jPanel38);
        jPanel38.setLayout(jPanel38Layout);
        jPanel38Layout.setHorizontalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel38Layout.setVerticalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter30.add(jPanel38);

        bEInsert3.setBackground(new java.awt.Color(35, 40, 50));
        bEInsert3.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bEInsert3.setForeground(new java.awt.Color(255, 255, 255));
        bEInsert3.setText("Enter element To ENQUEUE");
        bEInsert3.setBorder(null);
        bEInsert3.setBorderPainted(false);
        bEInsert3.setContentAreaFilled(false);
        bEInsert3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bEInsert3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bEInsert3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bEInsert3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bEInsert3MouseExited(evt);
            }
        });
        bEInsert3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEInsert3ActionPerformed(evt);
            }
        });
        pSCenter30.add(bEInsert3);

        jPanel39.setBackground(new java.awt.Color(35, 40, 50));
        jPanel39.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel39Layout = new javax.swing.GroupLayout(jPanel39);
        jPanel39.setLayout(jPanel39Layout);
        jPanel39Layout.setHorizontalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel39Layout.setVerticalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter30.add(jPanel39);

        qEValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        qEValue.setText("0");
        qEValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Value", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 0, 10))); // NOI18N
        qEValue.setMinimumSize(new java.awt.Dimension(0, 0));
        qEValue.setOpaque(true);
        qEValue.setPreferredSize(new java.awt.Dimension(50, 50));
        qEValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qEValueActionPerformed(evt);
            }
        });
        pSCenter30.add(qEValue);

        jPanel40.setBackground(new java.awt.Color(35, 40, 50));
        jPanel40.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel40Layout = new javax.swing.GroupLayout(jPanel40);
        jPanel40.setLayout(jPanel40Layout);
        jPanel40Layout.setHorizontalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel40Layout.setVerticalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter30.add(jPanel40);

        bSReset1.setBackground(new java.awt.Color(35, 40, 50));
        bSReset1.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSReset1.setForeground(new java.awt.Color(255, 255, 255));
        bSReset1.setText("RESET");
        bSReset1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSReset1.setContentAreaFilled(false);
        bSReset1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSReset1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSReset1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSReset1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSReset1MouseExited(evt);
            }
        });
        bSReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSReset1ActionPerformed(evt);
            }
        });
        pSCenter30.add(bSReset1);

        pQEnqueue.add(pSCenter30, java.awt.BorderLayout.CENTER);

        pSBot20.setBackground(new java.awt.Color(35, 40, 50));
        pSBot20.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bEnqueue.setBackground(new java.awt.Color(24, 25, 28));
        bEnqueue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bEnqueue.setBorder(null);
        bEnqueue.setBorderPainted(false);
        bEnqueue.setContentAreaFilled(false);
        bEnqueue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bEnqueue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEnqueue.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bEnqueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEnqueueActionPerformed(evt);
            }
        });
        pSBot20.add(bEnqueue);

        pQEnqueue.add(pSBot20, java.awt.BorderLayout.SOUTH);

        pQInput.add(pQEnqueue, "QEnqueueMenu");

        pQDequeue.setBackground(new java.awt.Color(35, 40, 50));
        pQDequeue.setLayout(new java.awt.BorderLayout());

        pSTop24.setBackground(new java.awt.Color(35, 40, 50));
        pSTop24.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bInsertBack5.setBackground(new java.awt.Color(24, 25, 28));
        bInsertBack5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bInsertBack5.setBorder(null);
        bInsertBack5.setBorderPainted(false);
        bInsertBack5.setContentAreaFilled(false);
        bInsertBack5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertBack5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bInsertBack5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertBack5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bInsertBack5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertBack5ActionPerformed(evt);
            }
        });
        pSTop24.add(bInsertBack5);

        pQDequeue.add(pSTop24, java.awt.BorderLayout.NORTH);

        pSCenter31.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter31.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bInsertionTitle5.setBackground(new java.awt.Color(35, 40, 50));
        bInsertionTitle5.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bInsertionTitle5.setForeground(new java.awt.Color(255, 255, 255));
        bInsertionTitle5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_updation_gif.gif"))); // NOI18N
        bInsertionTitle5.setText("DEQUEUE");
        bInsertionTitle5.setBorder(null);
        bInsertionTitle5.setBorderPainted(false);
        bInsertionTitle5.setContentAreaFilled(false);
        bInsertionTitle5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertionTitle5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertionTitle5.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bInsertionTitle5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInsertionTitle5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInsertionTitle5MouseExited(evt);
            }
        });
        bInsertionTitle5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertionTitle5ActionPerformed(evt);
            }
        });
        pSCenter31.add(bInsertionTitle5);

        jPanel41.setBackground(new java.awt.Color(35, 40, 50));
        jPanel41.setPreferredSize(new java.awt.Dimension(1000, 100));

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter31.add(jPanel41);

        bSDisplay4.setBackground(new java.awt.Color(35, 40, 50));
        bSDisplay4.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSDisplay4.setForeground(new java.awt.Color(255, 255, 255));
        bSDisplay4.setText("DISPLAY");
        bSDisplay4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSDisplay4.setContentAreaFilled(false);
        bSDisplay4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSDisplay4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSDisplay4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSDisplay4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSDisplay4MouseExited(evt);
            }
        });
        bSDisplay4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSDisplay4ActionPerformed(evt);
            }
        });
        pSCenter31.add(bSDisplay4);

        jPanel42.setBackground(new java.awt.Color(35, 40, 50));
        jPanel42.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel42Layout = new javax.swing.GroupLayout(jPanel42);
        jPanel42.setLayout(jPanel42Layout);
        jPanel42Layout.setHorizontalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel42Layout.setVerticalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter31.add(jPanel42);

        jPanel43.setBackground(new java.awt.Color(35, 40, 50));
        jPanel43.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel43Layout = new javax.swing.GroupLayout(jPanel43);
        jPanel43.setLayout(jPanel43Layout);
        jPanel43Layout.setHorizontalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel43Layout.setVerticalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter31.add(jPanel43);

        pQDequeue.add(pSCenter31, java.awt.BorderLayout.CENTER);

        pSBot21.setBackground(new java.awt.Color(35, 40, 50));
        pSBot21.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bDequeue.setBackground(new java.awt.Color(24, 25, 28));
        bDequeue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bDequeue.setBorder(null);
        bDequeue.setBorderPainted(false);
        bDequeue.setContentAreaFilled(false);
        bDequeue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bDequeue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bDequeue.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bDequeue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDequeueActionPerformed(evt);
            }
        });
        pSBot21.add(bDequeue);

        pQDequeue.add(pSBot21, java.awt.BorderLayout.SOUTH);

        pQInput.add(pQDequeue, "QDequeueMenu");

        pQPeek.setBackground(new java.awt.Color(35, 40, 50));
        pQPeek.setLayout(new java.awt.BorderLayout());

        pSTop25.setBackground(new java.awt.Color(35, 40, 50));
        pSTop25.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bInsertBack6.setBackground(new java.awt.Color(24, 25, 28));
        bInsertBack6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bInsertBack6.setBorder(null);
        bInsertBack6.setBorderPainted(false);
        bInsertBack6.setContentAreaFilled(false);
        bInsertBack6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertBack6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bInsertBack6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertBack6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bInsertBack6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertBack6ActionPerformed(evt);
            }
        });
        pSTop25.add(bInsertBack6);

        pQPeek.add(pSTop25, java.awt.BorderLayout.NORTH);

        pSCenter32.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter32.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bInsertionTitle6.setBackground(new java.awt.Color(35, 40, 50));
        bInsertionTitle6.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bInsertionTitle6.setForeground(new java.awt.Color(255, 255, 255));
        bInsertionTitle6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_peek_gif.gif"))); // NOI18N
        bInsertionTitle6.setText("PEEK");
        bInsertionTitle6.setBorder(null);
        bInsertionTitle6.setBorderPainted(false);
        bInsertionTitle6.setContentAreaFilled(false);
        bInsertionTitle6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertionTitle6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertionTitle6.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bInsertionTitle6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInsertionTitle6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInsertionTitle6MouseExited(evt);
            }
        });
        bInsertionTitle6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertionTitle6ActionPerformed(evt);
            }
        });
        pSCenter32.add(bInsertionTitle6);

        jPanel44.setBackground(new java.awt.Color(35, 40, 50));
        jPanel44.setPreferredSize(new java.awt.Dimension(1000, 100));

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter32.add(jPanel44);

        bSDisplay5.setBackground(new java.awt.Color(35, 40, 50));
        bSDisplay5.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSDisplay5.setForeground(new java.awt.Color(255, 255, 255));
        bSDisplay5.setText("DISPLAY");
        bSDisplay5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSDisplay5.setContentAreaFilled(false);
        bSDisplay5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSDisplay5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSDisplay5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSDisplay5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSDisplay5MouseExited(evt);
            }
        });
        bSDisplay5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSDisplay5ActionPerformed(evt);
            }
        });
        pSCenter32.add(bSDisplay5);

        jPanel45.setBackground(new java.awt.Color(35, 40, 50));
        jPanel45.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter32.add(jPanel45);

        jPanel46.setBackground(new java.awt.Color(35, 40, 50));
        jPanel46.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter32.add(jPanel46);

        pQPeek.add(pSCenter32, java.awt.BorderLayout.CENTER);

        pSBot22.setBackground(new java.awt.Color(35, 40, 50));
        pSBot22.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bqPeek.setBackground(new java.awt.Color(24, 25, 28));
        bqPeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bqPeek.setBorder(null);
        bqPeek.setBorderPainted(false);
        bqPeek.setContentAreaFilled(false);
        bqPeek.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bqPeek.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bqPeek.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bqPeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bqPeekActionPerformed(evt);
            }
        });
        pSBot22.add(bqPeek);

        pQPeek.add(pSBot22, java.awt.BorderLayout.SOUTH);

        pQInput.add(pQPeek, "QPeekMenu");

        pSCenter26.add(pQInput);

        pQOutput.setBackground(new java.awt.Color(35, 40, 50));
        pQOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OUTPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pQOutput.setForeground(new java.awt.Color(255, 255, 255));
        pQOutput.setPreferredSize(new java.awt.Dimension(550, 600));
        pQOutput.setLayout(new java.awt.CardLayout());

        pQOIntro.setBackground(new java.awt.Color(35, 40, 50));
        pQOIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane28.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane28.setBorder(null);
        jScrollPane28.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane28.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane28.setHorizontalScrollBar(null);
        jScrollPane28.setOpaque(false);
        jScrollPane28.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane28.setRequestFocusEnabled(false);
        jScrollPane28.setWheelScrollingEnabled(false);

        jTextArea23.setEditable(false);
        jTextArea23.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea23.setColumns(20);
        jTextArea23.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea23.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea23.setLineWrap(true);
        jTextArea23.setText("Hey there, curious clicker! Want to know more about the buttons on this screen? Well, it's as easy as a single click or tap! Just pick a button on the left that piques your interest and voila! A magical description will appear before your very eyes! It's like having a button whisperer in your pocket! This nifty feature is here to help you navigate and understand this interface, so don't be shy, give those buttons a click and unlock their secrets!");
        jTextArea23.setWrapStyleWord(true);
        jTextArea23.setAutoscrolls(false);
        jTextArea23.setBorder(null);
        jTextArea23.setFocusable(false);
        jTextArea23.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane28.setViewportView(jTextArea23);

        pQOIntro.add(jScrollPane28, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQOIntro, "QOIntro");

        pQOLoading.setBackground(new java.awt.Color(35, 40, 50));
        pQOLoading.setLayout(new java.awt.BorderLayout());

        bArrays7.setBackground(new java.awt.Color(35, 40, 50));
        bArrays7.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays7.setForeground(new java.awt.Color(255, 255, 255));
        bArrays7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays7.setText("LOADING...");
        bArrays7.setBorder(null);
        bArrays7.setBorderPainted(false);
        bArrays7.setContentAreaFilled(false);
        bArrays7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays7MouseExited(evt);
            }
        });
        bArrays7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays7ActionPerformed(evt);
            }
        });
        pQOLoading.add(bArrays7, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQOLoading, "QOLoading");

        pQEnqueueIntro.setBackground(new java.awt.Color(35, 40, 50));
        pQEnqueueIntro.setFocusable(false);
        pQEnqueueIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane32.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane32.setBorder(null);
        jScrollPane32.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane32.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane32.setHorizontalScrollBar(null);
        jScrollPane32.setOpaque(false);
        jScrollPane32.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane32.setRequestFocusEnabled(false);
        jScrollPane32.setWheelScrollingEnabled(false);

        jTextArea26.setEditable(false);
        jTextArea26.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea26.setColumns(20);
        jTextArea26.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea26.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea26.setLineWrap(true);
        jTextArea26.setText("Enqueue is an operation in a queue data structure that adds an element to the back of the queue. The newly added element becomes the last element in the queue, which means that it will be the first element to be removed when the dequeue operation is performed. The enqueue operation is commonly used in situations where new elements need to be added to a queue in a first-in, first-out (FIFO) manner. This operation is crucial in many computer algorithms and data processing applications.");
        jTextArea26.setWrapStyleWord(true);
        jTextArea26.setAutoscrolls(false);
        jTextArea26.setBorder(null);
        jTextArea26.setFocusable(false);
        jTextArea26.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane32.setViewportView(jTextArea26);

        pQEnqueueIntro.add(jScrollPane32, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQEnqueueIntro, "QEnqueueIntro");

        pQEnqueueOutput.setBackground(new java.awt.Color(35, 40, 50));
        pQEnqueueOutput.setFocusable(false);
        pQEnqueueOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane38.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane38.setBorder(null);
        jScrollPane38.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane38.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane38.setHorizontalScrollBar(null);
        jScrollPane38.setOpaque(false);
        jScrollPane38.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane38.setRequestFocusEnabled(false);
        jScrollPane38.setWheelScrollingEnabled(false);

        enqueueOutputArea.setEditable(false);
        enqueueOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        enqueueOutputArea.setColumns(20);
        enqueueOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        enqueueOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        enqueueOutputArea.setLineWrap(true);
        enqueueOutputArea.setWrapStyleWord(true);
        enqueueOutputArea.setAutoscrolls(false);
        enqueueOutputArea.setBorder(null);
        enqueueOutputArea.setFocusable(false);
        enqueueOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane38.setViewportView(enqueueOutputArea);

        pQEnqueueOutput.add(jScrollPane38, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQEnqueueOutput, "QEnqueueOutput");

        pQDequeueIntro.setBackground(new java.awt.Color(35, 40, 50));
        pQDequeueIntro.setFocusable(false);
        pQDequeueIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane39.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane39.setBorder(null);
        jScrollPane39.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane39.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane39.setHorizontalScrollBar(null);
        jScrollPane39.setOpaque(false);
        jScrollPane39.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane39.setRequestFocusEnabled(false);
        jScrollPane39.setWheelScrollingEnabled(false);

        jTextArea29.setEditable(false);
        jTextArea29.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea29.setColumns(20);
        jTextArea29.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea29.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea29.setLineWrap(true);
        jTextArea29.setText("Dequeue operation, as the name suggests, is used to remove an element from the front of the queue. When an element is dequeued from a queue, it is permanently removed from the queue. This operation modifies the state of the queue, and any subsequent operations on the queue will reflect this change. Dequeue operation is useful in situations where you need to process the elements of a queue in a specific order.");
        jTextArea29.setWrapStyleWord(true);
        jTextArea29.setAutoscrolls(false);
        jTextArea29.setBorder(null);
        jTextArea29.setFocusable(false);
        jTextArea29.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane39.setViewportView(jTextArea29);

        pQDequeueIntro.add(jScrollPane39, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQDequeueIntro, "QDequeueIntro");

        pQDequeueOutput.setBackground(new java.awt.Color(35, 40, 50));
        pQDequeueOutput.setFocusable(false);
        pQDequeueOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane40.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane40.setBorder(null);
        jScrollPane40.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane40.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane40.setHorizontalScrollBar(null);
        jScrollPane40.setOpaque(false);
        jScrollPane40.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane40.setRequestFocusEnabled(false);
        jScrollPane40.setWheelScrollingEnabled(false);

        dequeueOutputArea.setEditable(false);
        dequeueOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        dequeueOutputArea.setColumns(20);
        dequeueOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        dequeueOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        dequeueOutputArea.setLineWrap(true);
        dequeueOutputArea.setWrapStyleWord(true);
        dequeueOutputArea.setAutoscrolls(false);
        dequeueOutputArea.setBorder(null);
        dequeueOutputArea.setFocusable(false);
        dequeueOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane40.setViewportView(dequeueOutputArea);

        pQDequeueOutput.add(jScrollPane40, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQDequeueOutput, "QDequeueOutput");

        pQPeekIntro.setBackground(new java.awt.Color(35, 40, 50));
        pQPeekIntro.setFocusable(false);
        pQPeekIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane41.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane41.setBorder(null);
        jScrollPane41.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane41.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane41.setHorizontalScrollBar(null);
        jScrollPane41.setOpaque(false);
        jScrollPane41.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane41.setRequestFocusEnabled(false);
        jScrollPane41.setWheelScrollingEnabled(false);

        jTextArea30.setEditable(false);
        jTextArea30.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea30.setColumns(20);
        jTextArea30.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea30.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea30.setLineWrap(true);
        jTextArea30.setText("On the other hand, peek operation is used to examine the element at the front of the queue without removing it. This operation does not modify the state of the queue and is a non-destructive operation. Peek operation is useful in situations where you need to inspect the element at the front of the queue before removing it. By using the peek operation, you can access the element without altering the state of the queue.\n");
        jTextArea30.setWrapStyleWord(true);
        jTextArea30.setAutoscrolls(false);
        jTextArea30.setBorder(null);
        jTextArea30.setFocusable(false);
        jTextArea30.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane41.setViewportView(jTextArea30);

        pQPeekIntro.add(jScrollPane41, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQPeekIntro, "QPeekIntro");

        pQPeekOutput.setBackground(new java.awt.Color(35, 40, 50));
        pQPeekOutput.setFocusable(false);
        pQPeekOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane42.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane42.setBorder(null);
        jScrollPane42.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane42.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane42.setHorizontalScrollBar(null);
        jScrollPane42.setOpaque(false);
        jScrollPane42.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane42.setRequestFocusEnabled(false);
        jScrollPane42.setWheelScrollingEnabled(false);

        qPeekOutputArea.setEditable(false);
        qPeekOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        qPeekOutputArea.setColumns(20);
        qPeekOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        qPeekOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        qPeekOutputArea.setLineWrap(true);
        qPeekOutputArea.setWrapStyleWord(true);
        qPeekOutputArea.setAutoscrolls(false);
        qPeekOutputArea.setBorder(null);
        qPeekOutputArea.setFocusable(false);
        qPeekOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane42.setViewportView(qPeekOutputArea);

        pQPeekOutput.add(jScrollPane42, java.awt.BorderLayout.CENTER);

        pQOutput.add(pQPeekOutput, "QPeekOutput");

        pSCenter26.add(pQOutput);

        pQueueOperations.add(pSCenter26, java.awt.BorderLayout.CENTER);

        pQueue.add(pQueueOperations, "QueueOperations");

        pContainer.add(pQueue, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bArrays1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays1MouseEntered

    private void bArrays1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays1MouseExited

    private void bArrays1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays1ActionPerformed

    private void bBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack2ActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pQueue.getLayout();
        cardLayout.show(pQueue, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bBack2ActionPerformed

    private void bNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNext2ActionPerformed
        CardLayout cardLayout = (CardLayout) pQueue.getLayout();
        cardLayout.show(pQueue, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pQueue, "QueueOperations");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bNext2ActionPerformed

    private void bBack11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack11ActionPerformed
        CardLayout cardLayout = (CardLayout) pQueue.getLayout();
        cardLayout.show(pQueue, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pQueue, "QueuesIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bBack11ActionPerformed

    private void bQueueEnqueueMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bQueueEnqueueMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bQueueEnqueueMouseEntered

    private void bQueueEnqueueMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bQueueEnqueueMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bQueueEnqueueMouseExited

    private void bQueueEnqueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQueueEnqueueActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pQInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pQInput, "QILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pQOutput, "QOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pQInput, "QEnqueueMenu");
            outputLayout.show(pQOutput, "QEnqueueIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bQueueEnqueueActionPerformed

    private void bQueueDequeueMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bQueueDequeueMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bQueueDequeueMouseEntered

    private void bQueueDequeueMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bQueueDequeueMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bQueueDequeueMouseExited

    private void bQueueDequeueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQueueDequeueActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pQInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pQInput, "QILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pQOutput, "QOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pQInput, "QDequeueMenu");
            outputLayout.show(pQOutput, "QDequeueIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bQueueDequeueActionPerformed

    private void bQueuePeekMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bQueuePeekMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bQueuePeekMouseEntered

    private void bQueuePeekMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bQueuePeekMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bQueuePeekMouseExited

    private void bQueuePeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQueuePeekActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pQInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pQInput, "QILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pQOutput, "QOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pQInput, "QPeekMenu");
            outputLayout.show(pQOutput, "QPeekIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bQueuePeekActionPerformed

    private void bArrays6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays6MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays6MouseEntered

    private void bArrays6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays6MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays6MouseExited

    private void bArrays6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays6ActionPerformed

    private void bInsertBack4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertBack4ActionPerformed
        switchQueueLayouts(pQInput, pQOutput);
    }//GEN-LAST:event_bInsertBack4ActionPerformed

    private void bInsertionTitle4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle4MouseEntered

    private void bInsertionTitle4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle4MouseExited

    private void bInsertionTitle4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertionTitle4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle4ActionPerformed

    private void bSDisplay3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSDisplay3MouseEntered

    private void bSDisplay3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay3MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSDisplay3MouseExited

    private void bSDisplay3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSDisplay3ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        // Load queue from file
        Queue<Integer> queue = FileHandler.loadQueueInputValues();

        // Pass queue to the constructor
        DataHandler operations = new DataHandler(null, null, queue);
        String result = operations.displayQueue();

        enqueueOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QEnqueueOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSDisplay3ActionPerformed

    private void bEInsert3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bEInsert3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bEInsert3MouseEntered

    private void bEInsert3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bEInsert3MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bEInsert3MouseExited

    private void bEInsert3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEInsert3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bEInsert3ActionPerformed

    private void qEValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qEValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qEValueActionPerformed

    private void bSReset1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSReset1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSReset1MouseEntered

    private void bSReset1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSReset1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSReset1MouseExited

    private void bSReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSReset1ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        Queue<Integer> queue = new LinkedList<>();

        queue.clear();

        // Pass both array and stack to the constructor
        String result = "Queue has been cleared!";

        // Save the updated stack to a file
        FileHandler.saveQueueInputValues(queue);

        enqueueOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QEnqueueOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSReset1ActionPerformed

    private void bEnqueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEnqueueActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        // Load queue from file
        Queue<Integer> queue = FileHandler.loadQueueInputValues();

        int value = Integer.parseInt(qEValue.getText());

        // Add new value to the queue
        Queue<Integer> modifiedQueue = DataHandler.enqueue(queue, value);

        String result = "Enqueued " + value + " into Queue: " + modifiedQueue.toString();
        FileHandler.saveQueueInputValues(modifiedQueue);

        enqueueOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QEnqueueOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bEnqueueActionPerformed

    private void bInsertBack5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertBack5ActionPerformed
        switchQueueLayouts(pQInput, pQOutput);
    }//GEN-LAST:event_bInsertBack5ActionPerformed

    private void bInsertionTitle5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle5MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle5MouseEntered

    private void bInsertionTitle5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle5MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle5MouseExited

    private void bInsertionTitle5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertionTitle5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle5ActionPerformed

    private void bSDisplay4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSDisplay4MouseEntered

    private void bSDisplay4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSDisplay4MouseExited

    private void bSDisplay4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSDisplay4ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        // Load queue from file
        Queue<Integer> queue = FileHandler.loadQueueInputValues();

        // Pass queue to the constructor
        DataHandler operations = new DataHandler(null, null, queue);
        String result = operations.displayQueue();

        dequeueOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QDequeueOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSDisplay4ActionPerformed

    private void bDequeueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDequeueActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        // Load queue from file
        Queue<Integer> queue = FileHandler.loadQueueInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, null, queue);
        String result = operations.dequeue();

        FileHandler.saveQueueInputValues(queue);

        dequeueOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QDequeueOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bDequeueActionPerformed

    private void bInsertBack6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertBack6ActionPerformed
        switchQueueLayouts(pQInput, pQOutput);
    }//GEN-LAST:event_bInsertBack6ActionPerformed

    private void bInsertionTitle6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle6MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle6MouseEntered

    private void bInsertionTitle6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle6MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle6MouseExited

    private void bInsertionTitle6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertionTitle6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle6ActionPerformed

    private void bSDisplay5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay5MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSDisplay5MouseEntered

    private void bSDisplay5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay5MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSDisplay5MouseExited

    private void bSDisplay5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSDisplay5ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        // Load queue from file
        Queue<Integer> queue = FileHandler.loadQueueInputValues();

        // Pass queue to the constructor
        DataHandler operations = new DataHandler(null, null, queue);
        String result = operations.displayQueue();

        qPeekOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QPeekOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSDisplay5ActionPerformed

    private void bqPeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bqPeekActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pQOutput.getLayout();
        outputLayout.show(pQOutput, "QOLoading");

        // Load queue from file
        Queue<Integer> queue = FileHandler.loadQueueInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, null, queue);
        String result = operations.peekQueue();

        FileHandler.saveQueueInputValues(queue);

        qPeekOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pQOutput, "QPeekOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bqPeekActionPerformed

    private void bArrays7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays7MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays7MouseEntered

    private void bArrays7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays7MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays7MouseExited

    private void bArrays7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays7ActionPerformed

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pQueue.getLayout();
        cardLayout.show(pQueue, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bHomeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueueFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bArrays1;
    private javax.swing.JButton bArrays6;
    private javax.swing.JButton bArrays7;
    private javax.swing.JButton bBack11;
    private javax.swing.JButton bBack2;
    private javax.swing.JButton bDequeue;
    private javax.swing.JButton bEInsert3;
    private javax.swing.JButton bEnqueue;
    private javax.swing.JButton bHome;
    private javax.swing.JButton bInsertBack4;
    private javax.swing.JButton bInsertBack5;
    private javax.swing.JButton bInsertBack6;
    private javax.swing.JButton bInsertionTitle4;
    private javax.swing.JButton bInsertionTitle5;
    private javax.swing.JButton bInsertionTitle6;
    private javax.swing.JButton bNext2;
    private javax.swing.JButton bQueueDequeue;
    private javax.swing.JButton bQueueEnqueue;
    private javax.swing.JButton bQueuePeek;
    private javax.swing.JButton bSDisplay3;
    private javax.swing.JButton bSDisplay4;
    private javax.swing.JButton bSDisplay5;
    private javax.swing.JButton bSReset1;
    private javax.swing.JButton bqPeek;
    private javax.swing.JTextArea dequeueOutputArea;
    private javax.swing.JTextArea enqueueOutputArea;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JTextArea jTextArea23;
    private javax.swing.JTextArea jTextArea26;
    private javax.swing.JTextArea jTextArea29;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea30;
    private javax.swing.JPanel pContainer;
    private javax.swing.JPanel pLoading;
    private javax.swing.JPanel pQDequeue;
    private javax.swing.JPanel pQDequeueIntro;
    private javax.swing.JPanel pQDequeueOutput;
    private javax.swing.JPanel pQEnqueue;
    private javax.swing.JPanel pQEnqueueIntro;
    private javax.swing.JPanel pQEnqueueOutput;
    private javax.swing.JPanel pQILoading;
    private javax.swing.JPanel pQInput;
    private javax.swing.JPanel pQMenus;
    private javax.swing.JPanel pQOIntro;
    private javax.swing.JPanel pQOLoading;
    private javax.swing.JPanel pQOutput;
    private javax.swing.JPanel pQPeek;
    private javax.swing.JPanel pQPeekIntro;
    private javax.swing.JPanel pQPeekOutput;
    private javax.swing.JPanel pQueue;
    private javax.swing.JPanel pQueueOperations;
    private javax.swing.JPanel pQueuesIntro;
    private javax.swing.JPanel pSBot11;
    private javax.swing.JPanel pSBot20;
    private javax.swing.JPanel pSBot21;
    private javax.swing.JPanel pSBot22;
    private javax.swing.JPanel pSBot4;
    private javax.swing.JPanel pSCenter19;
    private javax.swing.JPanel pSCenter26;
    private javax.swing.JPanel pSCenter30;
    private javax.swing.JPanel pSCenter31;
    private javax.swing.JPanel pSCenter32;
    private javax.swing.JPanel pSCenter6;
    private javax.swing.JPanel pSCenter7;
    private javax.swing.JPanel pSTop11;
    private javax.swing.JPanel pSTop19;
    private javax.swing.JPanel pSTop23;
    private javax.swing.JPanel pSTop24;
    private javax.swing.JPanel pSTop25;
    private javax.swing.JPanel pSTop4;
    private javax.swing.JTextField qEValue;
    private javax.swing.JTextArea qPeekOutputArea;
    private javax.swing.JLabel sTitle14;
    private javax.swing.JLabel sTitle5;
    private javax.swing.JLabel structImg2;
    // End of variables declaration//GEN-END:variables
}
