/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dataStructures;

import handlers.DataHandler;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.Timer;
import main.Home;
/**
 *
 * @author jhnyx
 */
public class TreesFrame extends javax.swing.JFrame {
     private Home home;
    /**
     * Creates new form TreesFrame
     */
    public TreesFrame() {
        initComponents();
        
        home = new Home();
    }
    
     private void switchLayouts(JPanel pInput, JPanel pOutput) {

        // Get a reference to the CardLayout of the pInput panel
        CardLayout InputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        InputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout OutputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        OutputLayout.show(pOutput, "OLoading");

        // Set up a timer to switch back to the main menus after a delay
        Timer timer = new Timer(500, (ActionEvent e) -> {
            InputLayout.show(pInput, "Menus");
            OutputLayout.show(pOutput, "OIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pContainer = new javax.swing.JPanel();
        pTrees = new javax.swing.JPanel();
        pTreesIntro = new javax.swing.JPanel();
        pSTop8 = new javax.swing.JPanel();
        bBack6 = new javax.swing.JButton();
        sTitle9 = new javax.swing.JLabel();
        bNext6 = new javax.swing.JButton();
        pSCenter14 = new javax.swing.JPanel();
        structImg6 = new javax.swing.JLabel();
        pSCenter15 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        pSBot8 = new javax.swing.JPanel();
        pLoading = new javax.swing.JPanel();
        pSTop11 = new javax.swing.JPanel();
        pSCenter19 = new javax.swing.JPanel();
        bArrays1 = new javax.swing.JButton();
        pSBot11 = new javax.swing.JPanel();
        pTreeOperations = new javax.swing.JPanel();
        pSTop12 = new javax.swing.JPanel();
        bBack9 = new javax.swing.JButton();
        sTitle12 = new javax.swing.JLabel();
        bHome = new javax.swing.JButton();
        pSCenter20 = new javax.swing.JPanel();
        pInput = new javax.swing.JPanel();
        pMenus = new javax.swing.JPanel();
        bPreTraversal = new javax.swing.JButton();
        bInTraversal = new javax.swing.JButton();
        bPostTraversal = new javax.swing.JButton();
        pILoading = new javax.swing.JPanel();
        bArrays3 = new javax.swing.JButton();
        pPreMenu = new javax.swing.JPanel();
        pSTop17 = new javax.swing.JPanel();
        bSearchBack = new javax.swing.JButton();
        pSCenter23 = new javax.swing.JPanel();
        bSearchTitle = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        pSBot15 = new javax.swing.JPanel();
        bPre = new javax.swing.JButton();
        pInMenu = new javax.swing.JPanel();
        pSTop19 = new javax.swing.JPanel();
        bSearchBack2 = new javax.swing.JButton();
        pSCenter25 = new javax.swing.JPanel();
        bSearchTitle2 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        pSBot17 = new javax.swing.JPanel();
        bIn = new javax.swing.JButton();
        pPostMenu = new javax.swing.JPanel();
        pSTop20 = new javax.swing.JPanel();
        bSearchBack3 = new javax.swing.JButton();
        pSCenter26 = new javax.swing.JPanel();
        bSearchTitle3 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        pSBot18 = new javax.swing.JPanel();
        bPost = new javax.swing.JButton();
        pOutput = new javax.swing.JPanel();
        pOIntro = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        pOLoading = new javax.swing.JPanel();
        bArrays2 = new javax.swing.JButton();
        pPreIntro = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextArea18 = new javax.swing.JTextArea();
        pPreOutput = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        preOutputArea = new javax.swing.JTextArea();
        pInIntro = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTextArea19 = new javax.swing.JTextArea();
        pInOutput = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        inOutputArea = new javax.swing.JTextArea();
        pPostIntro = new javax.swing.JPanel();
        jScrollPane25 = new javax.swing.JScrollPane();
        jTextArea20 = new javax.swing.JTextArea();
        pPostOutput = new javax.swing.JPanel();
        jScrollPane26 = new javax.swing.JScrollPane();
        postOutputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setResizable(false);

        pContainer.setLayout(new java.awt.BorderLayout());

        pTrees.setMaximumSize(new java.awt.Dimension(1280, 720));
        pTrees.setRequestFocusEnabled(false);
        pTrees.setLayout(new java.awt.CardLayout());

        pTreesIntro.setBackground(new java.awt.Color(35, 40, 50));
        pTreesIntro.setMinimumSize(new java.awt.Dimension(1280, 720));
        pTreesIntro.setPreferredSize(new java.awt.Dimension(1280, 720));
        pTreesIntro.setLayout(new java.awt.BorderLayout());

        pSTop8.setBackground(new java.awt.Color(24, 25, 28));
        pSTop8.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack6.setBackground(new java.awt.Color(24, 25, 28));
        bBack6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack6.setBorder(null);
        bBack6.setBorderPainted(false);
        bBack6.setContentAreaFilled(false);
        bBack6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack6ActionPerformed(evt);
            }
        });
        pSTop8.add(bBack6);

        sTitle9.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle9.setForeground(new java.awt.Color(255, 255, 255));
        sTitle9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle9.setText("TREES");
        sTitle9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle9.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle9.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle9.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle9.setRequestFocusEnabled(false);
        pSTop8.add(sTitle9);

        bNext6.setBackground(new java.awt.Color(24, 25, 28));
        bNext6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/next_icon.png"))); // NOI18N
        bNext6.setBorder(null);
        bNext6.setBorderPainted(false);
        bNext6.setContentAreaFilled(false);
        bNext6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bNext6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_next_icon.png"))); // NOI18N
        bNext6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bNext6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNext6ActionPerformed(evt);
            }
        });
        pSTop8.add(bNext6);

        pTreesIntro.add(pSTop8, java.awt.BorderLayout.PAGE_START);

        pSCenter14.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter14.setLayout(new java.awt.BorderLayout());

        structImg6.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        structImg6.setForeground(new java.awt.Color(255, 255, 255));
        structImg6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        structImg6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/tree_gif.gif"))); // NOI18N
        structImg6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pSCenter14.add(structImg6, java.awt.BorderLayout.WEST);

        pSCenter15.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jScrollPane7.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane7.setBorder(null);
        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane7.setHorizontalScrollBar(null);
        jScrollPane7.setOpaque(false);
        jScrollPane7.setPreferredSize(new java.awt.Dimension(750, 1000));

        jTextArea7.setEditable(false);
        jTextArea7.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea7.setColumns(20);
        jTextArea7.setFont(new java.awt.Font("Russo One", 0, 22)); // NOI18N
        jTextArea7.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea7.setLineWrap(true);
        jTextArea7.setText("Trees are used in various applications, such as file systems, database indexing, and programming languages. They can be implemented in different ways, including binary trees, where each node has at most two child nodes, and multiway trees, where each node can have more than two child nodes.\n\nBinary search trees are a type of binary tree used for efficient searching and sorting of data. They are organized such that all nodes in the left subtree of a node contain data less than the node's data, while all nodes in the right subtree contain data greater than the node's data.\n\nUnderstanding trees and their properties is crucial for designing and implementing efficient algorithms and data structures. They are widely used in computer science and related fields and offer a powerful way to represent and manipulate hierarchical data relationships.");
        jTextArea7.setWrapStyleWord(true);
        jTextArea7.setAutoscrolls(false);
        jTextArea7.setBorder(null);
        jTextArea7.setFocusable(false);
        jScrollPane7.setViewportView(jTextArea7);

        pSCenter15.add(jScrollPane7);

        pSCenter14.add(pSCenter15, java.awt.BorderLayout.CENTER);

        pTreesIntro.add(pSCenter14, java.awt.BorderLayout.CENTER);

        pSBot8.setBackground(new java.awt.Color(35, 40, 50));
        pSBot8.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pTreesIntro.add(pSBot8, java.awt.BorderLayout.SOUTH);

        pTrees.add(pTreesIntro, "TreesIntro");

        pLoading.setBackground(new java.awt.Color(35, 40, 50));
        pLoading.setMinimumSize(new java.awt.Dimension(1280, 720));
        pLoading.setPreferredSize(new java.awt.Dimension(1280, 720));
        pLoading.setLayout(new java.awt.BorderLayout());

        pSTop11.setBackground(new java.awt.Color(35, 40, 50));
        pSTop11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 25));
        pLoading.add(pSTop11, java.awt.BorderLayout.NORTH);

        pSCenter19.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter19.setLayout(new java.awt.GridLayout());

        bArrays1.setBackground(new java.awt.Color(35, 40, 50));
        bArrays1.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays1.setForeground(new java.awt.Color(255, 255, 255));
        bArrays1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/loading_gif.gif"))); // NOI18N
        bArrays1.setText("LOADING...");
        bArrays1.setBorder(null);
        bArrays1.setBorderPainted(false);
        bArrays1.setContentAreaFilled(false);
        bArrays1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays1MouseExited(evt);
            }
        });
        bArrays1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays1ActionPerformed(evt);
            }
        });
        pSCenter19.add(bArrays1);

        pLoading.add(pSCenter19, java.awt.BorderLayout.CENTER);

        pSBot11.setBackground(new java.awt.Color(35, 40, 50));
        pSBot11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pLoading.add(pSBot11, java.awt.BorderLayout.SOUTH);

        pTrees.add(pLoading, "Loading");

        pTreeOperations.setBackground(new java.awt.Color(35, 40, 50));
        pTreeOperations.setMinimumSize(new java.awt.Dimension(1280, 720));
        pTreeOperations.setPreferredSize(new java.awt.Dimension(1280, 720));
        pTreeOperations.setLayout(new java.awt.BorderLayout());

        pSTop12.setBackground(new java.awt.Color(24, 25, 28));
        pSTop12.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack9.setBackground(new java.awt.Color(24, 25, 28));
        bBack9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack9.setBorder(null);
        bBack9.setBorderPainted(false);
        bBack9.setContentAreaFilled(false);
        bBack9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack9.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack9ActionPerformed(evt);
            }
        });
        pSTop12.add(bBack9);

        sTitle12.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle12.setForeground(new java.awt.Color(255, 255, 255));
        sTitle12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle12.setText("TREES OPERATIONS");
        sTitle12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle12.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle12.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle12.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle12.setRequestFocusEnabled(false);
        pSTop12.add(sTitle12);

        bHome.setBackground(new java.awt.Color(24, 25, 28));
        bHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/home_icon.png"))); // NOI18N
        bHome.setBorder(null);
        bHome.setBorderPainted(false);
        bHome.setContentAreaFilled(false);
        bHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bHome.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_home_icon.png"))); // NOI18N
        bHome.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });
        pSTop12.add(bHome);

        pTreeOperations.add(pSTop12, java.awt.BorderLayout.PAGE_START);

        pSCenter20.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 0));

        pInput.setBackground(new java.awt.Color(35, 40, 50));
        pInput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pInput.setForeground(new java.awt.Color(255, 255, 255));
        pInput.setPreferredSize(new java.awt.Dimension(550, 600));
        pInput.setLayout(new java.awt.CardLayout());

        pMenus.setBackground(new java.awt.Color(35, 40, 50));
        pMenus.setLayout(new java.awt.GridLayout(3, 0));

        bPreTraversal.setBackground(new java.awt.Color(35, 40, 50));
        bPreTraversal.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bPreTraversal.setForeground(new java.awt.Color(255, 255, 255));
        bPreTraversal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_updation_gif.gif"))); // NOI18N
        bPreTraversal.setText("PRE-ORDER TRAVERSAL");
        bPreTraversal.setBorder(null);
        bPreTraversal.setBorderPainted(false);
        bPreTraversal.setContentAreaFilled(false);
        bPreTraversal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPreTraversal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bPreTraversal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bPreTraversalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bPreTraversalMouseExited(evt);
            }
        });
        bPreTraversal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPreTraversalActionPerformed(evt);
            }
        });
        pMenus.add(bPreTraversal);

        bInTraversal.setBackground(new java.awt.Color(35, 40, 50));
        bInTraversal.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bInTraversal.setForeground(new java.awt.Color(255, 255, 255));
        bInTraversal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_traversal_gif.gif"))); // NOI18N
        bInTraversal.setText("IN-ORDER TRAVERSAL");
        bInTraversal.setBorder(null);
        bInTraversal.setBorderPainted(false);
        bInTraversal.setContentAreaFilled(false);
        bInTraversal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInTraversal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bInTraversal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInTraversalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInTraversalMouseExited(evt);
            }
        });
        bInTraversal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInTraversalActionPerformed(evt);
            }
        });
        pMenus.add(bInTraversal);

        bPostTraversal.setBackground(new java.awt.Color(35, 40, 50));
        bPostTraversal.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bPostTraversal.setForeground(new java.awt.Color(255, 255, 255));
        bPostTraversal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_push_gif.gif"))); // NOI18N
        bPostTraversal.setText("POST-ORDER TRAVERSAL");
        bPostTraversal.setBorder(null);
        bPostTraversal.setBorderPainted(false);
        bPostTraversal.setContentAreaFilled(false);
        bPostTraversal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPostTraversal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bPostTraversal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bPostTraversalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bPostTraversalMouseExited(evt);
            }
        });
        bPostTraversal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPostTraversalActionPerformed(evt);
            }
        });
        pMenus.add(bPostTraversal);

        pInput.add(pMenus, "Menus");

        pILoading.setBackground(new java.awt.Color(35, 40, 50));
        pILoading.setLayout(new java.awt.BorderLayout());

        bArrays3.setBackground(new java.awt.Color(35, 40, 50));
        bArrays3.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays3.setForeground(new java.awt.Color(255, 255, 255));
        bArrays3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays3.setText("LOADING...");
        bArrays3.setBorder(null);
        bArrays3.setBorderPainted(false);
        bArrays3.setContentAreaFilled(false);
        bArrays3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays3MouseExited(evt);
            }
        });
        bArrays3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays3ActionPerformed(evt);
            }
        });
        pILoading.add(bArrays3, java.awt.BorderLayout.CENTER);

        pInput.add(pILoading, "ILoading");

        pPreMenu.setBackground(new java.awt.Color(35, 40, 50));
        pPreMenu.setLayout(new java.awt.BorderLayout());

        pSTop17.setBackground(new java.awt.Color(35, 40, 50));
        pSTop17.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bSearchBack.setBackground(new java.awt.Color(24, 25, 28));
        bSearchBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bSearchBack.setBorder(null);
        bSearchBack.setBorderPainted(false);
        bSearchBack.setContentAreaFilled(false);
        bSearchBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchBack.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bSearchBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchBack.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bSearchBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchBackActionPerformed(evt);
            }
        });
        pSTop17.add(bSearchBack);

        pPreMenu.add(pSTop17, java.awt.BorderLayout.NORTH);

        pSCenter23.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter23.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bSearchTitle.setBackground(new java.awt.Color(35, 40, 50));
        bSearchTitle.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSearchTitle.setForeground(new java.awt.Color(255, 255, 255));
        bSearchTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_updation_gif.gif"))); // NOI18N
        bSearchTitle.setText("PRE-ORDER TRAVERSAL");
        bSearchTitle.setBorder(null);
        bSearchTitle.setBorderPainted(false);
        bSearchTitle.setContentAreaFilled(false);
        bSearchTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchTitle.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bSearchTitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSearchTitleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSearchTitleMouseExited(evt);
            }
        });
        bSearchTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchTitleActionPerformed(evt);
            }
        });
        pSCenter23.add(bSearchTitle);

        jPanel15.setBackground(new java.awt.Color(35, 40, 50));
        jPanel15.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter23.add(jPanel15);

        jPanel16.setBackground(new java.awt.Color(35, 40, 50));
        jPanel16.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        pSCenter23.add(jPanel16);

        jPanel18.setBackground(new java.awt.Color(35, 40, 50));
        jPanel18.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter23.add(jPanel18);

        pPreMenu.add(pSCenter23, java.awt.BorderLayout.CENTER);

        pSBot15.setBackground(new java.awt.Color(35, 40, 50));
        pSBot15.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bPre.setBackground(new java.awt.Color(24, 25, 28));
        bPre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bPre.setBorder(null);
        bPre.setBorderPainted(false);
        bPre.setContentAreaFilled(false);
        bPre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPre.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPreActionPerformed(evt);
            }
        });
        pSBot15.add(bPre);

        pPreMenu.add(pSBot15, java.awt.BorderLayout.SOUTH);

        pInput.add(pPreMenu, "PreMenu");

        pInMenu.setBackground(new java.awt.Color(35, 40, 50));
        pInMenu.setLayout(new java.awt.BorderLayout());

        pSTop19.setBackground(new java.awt.Color(35, 40, 50));
        pSTop19.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bSearchBack2.setBackground(new java.awt.Color(24, 25, 28));
        bSearchBack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bSearchBack2.setBorder(null);
        bSearchBack2.setBorderPainted(false);
        bSearchBack2.setContentAreaFilled(false);
        bSearchBack2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchBack2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bSearchBack2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchBack2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bSearchBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchBack2ActionPerformed(evt);
            }
        });
        pSTop19.add(bSearchBack2);

        pInMenu.add(pSTop19, java.awt.BorderLayout.NORTH);

        pSCenter25.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter25.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bSearchTitle2.setBackground(new java.awt.Color(35, 40, 50));
        bSearchTitle2.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSearchTitle2.setForeground(new java.awt.Color(255, 255, 255));
        bSearchTitle2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_traversal_gif.gif"))); // NOI18N
        bSearchTitle2.setText("IN-ORDER TRAVERSAL");
        bSearchTitle2.setBorder(null);
        bSearchTitle2.setBorderPainted(false);
        bSearchTitle2.setContentAreaFilled(false);
        bSearchTitle2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchTitle2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchTitle2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bSearchTitle2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSearchTitle2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSearchTitle2MouseExited(evt);
            }
        });
        bSearchTitle2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchTitle2ActionPerformed(evt);
            }
        });
        pSCenter25.add(bSearchTitle2);

        jPanel17.setBackground(new java.awt.Color(35, 40, 50));
        jPanel17.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter25.add(jPanel17);

        jPanel23.setBackground(new java.awt.Color(35, 40, 50));
        jPanel23.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        pSCenter25.add(jPanel23);

        jPanel24.setBackground(new java.awt.Color(35, 40, 50));
        jPanel24.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter25.add(jPanel24);

        pInMenu.add(pSCenter25, java.awt.BorderLayout.CENTER);

        pSBot17.setBackground(new java.awt.Color(35, 40, 50));
        pSBot17.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bIn.setBackground(new java.awt.Color(24, 25, 28));
        bIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bIn.setBorder(null);
        bIn.setBorderPainted(false);
        bIn.setContentAreaFilled(false);
        bIn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bIn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInActionPerformed(evt);
            }
        });
        pSBot17.add(bIn);

        pInMenu.add(pSBot17, java.awt.BorderLayout.SOUTH);

        pInput.add(pInMenu, "InMenu");

        pPostMenu.setBackground(new java.awt.Color(35, 40, 50));
        pPostMenu.setLayout(new java.awt.BorderLayout());

        pSTop20.setBackground(new java.awt.Color(35, 40, 50));
        pSTop20.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bSearchBack3.setBackground(new java.awt.Color(24, 25, 28));
        bSearchBack3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bSearchBack3.setBorder(null);
        bSearchBack3.setBorderPainted(false);
        bSearchBack3.setContentAreaFilled(false);
        bSearchBack3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchBack3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bSearchBack3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchBack3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bSearchBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchBack3ActionPerformed(evt);
            }
        });
        pSTop20.add(bSearchBack3);

        pPostMenu.add(pSTop20, java.awt.BorderLayout.NORTH);

        pSCenter26.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter26.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bSearchTitle3.setBackground(new java.awt.Color(35, 40, 50));
        bSearchTitle3.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSearchTitle3.setForeground(new java.awt.Color(255, 255, 255));
        bSearchTitle3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_push_gif.gif"))); // NOI18N
        bSearchTitle3.setText("POST-ORDER TRAVERSAL");
        bSearchTitle3.setBorder(null);
        bSearchTitle3.setBorderPainted(false);
        bSearchTitle3.setContentAreaFilled(false);
        bSearchTitle3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSearchTitle3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSearchTitle3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bSearchTitle3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSearchTitle3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSearchTitle3MouseExited(evt);
            }
        });
        bSearchTitle3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchTitle3ActionPerformed(evt);
            }
        });
        pSCenter26.add(bSearchTitle3);

        jPanel19.setBackground(new java.awt.Color(35, 40, 50));
        jPanel19.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter26.add(jPanel19);

        jPanel25.setBackground(new java.awt.Color(35, 40, 50));
        jPanel25.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        pSCenter26.add(jPanel25);

        jPanel26.setBackground(new java.awt.Color(35, 40, 50));
        jPanel26.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        pSCenter26.add(jPanel26);

        pPostMenu.add(pSCenter26, java.awt.BorderLayout.CENTER);

        pSBot18.setBackground(new java.awt.Color(35, 40, 50));
        pSBot18.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bPost.setBackground(new java.awt.Color(24, 25, 28));
        bPost.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bPost.setBorder(null);
        bPost.setBorderPainted(false);
        bPost.setContentAreaFilled(false);
        bPost.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPost.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPost.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPostActionPerformed(evt);
            }
        });
        pSBot18.add(bPost);

        pPostMenu.add(pSBot18, java.awt.BorderLayout.SOUTH);

        pInput.add(pPostMenu, "PostMenu");

        pSCenter20.add(pInput);

        pOutput.setBackground(new java.awt.Color(35, 40, 50));
        pOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OUTPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pOutput.setForeground(new java.awt.Color(255, 255, 255));
        pOutput.setPreferredSize(new java.awt.Dimension(550, 600));
        pOutput.setLayout(new java.awt.CardLayout());

        pOIntro.setBackground(new java.awt.Color(35, 40, 50));
        pOIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane12.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane12.setBorder(null);
        jScrollPane12.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane12.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane12.setHorizontalScrollBar(null);
        jScrollPane12.setOpaque(false);
        jScrollPane12.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane12.setRequestFocusEnabled(false);
        jScrollPane12.setWheelScrollingEnabled(false);

        jTextArea12.setEditable(false);
        jTextArea12.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea12.setColumns(20);
        jTextArea12.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea12.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea12.setLineWrap(true);
        jTextArea12.setText("Hey there, curious clicker! Want to know more about the buttons on this screen? Well, it's as easy as a single click or tap! Just pick a button on the left that piques your interest and voila! A magical description will appear before your very eyes! It's like having a button whisperer in your pocket! This nifty feature is here to help you navigate and understand this interface, so don't be shy, give those buttons a click and unlock their secrets!");
        jTextArea12.setWrapStyleWord(true);
        jTextArea12.setAutoscrolls(false);
        jTextArea12.setBorder(null);
        jTextArea12.setFocusable(false);
        jTextArea12.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane12.setViewportView(jTextArea12);

        pOIntro.add(jScrollPane12, java.awt.BorderLayout.CENTER);

        pOutput.add(pOIntro, "OIntro");

        pOLoading.setBackground(new java.awt.Color(35, 40, 50));
        pOLoading.setLayout(new java.awt.BorderLayout());

        bArrays2.setBackground(new java.awt.Color(35, 40, 50));
        bArrays2.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays2.setForeground(new java.awt.Color(255, 255, 255));
        bArrays2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays2.setText("LOADING...");
        bArrays2.setBorder(null);
        bArrays2.setBorderPainted(false);
        bArrays2.setContentAreaFilled(false);
        bArrays2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays2MouseExited(evt);
            }
        });
        bArrays2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays2ActionPerformed(evt);
            }
        });
        pOLoading.add(bArrays2, java.awt.BorderLayout.CENTER);

        pOutput.add(pOLoading, "OLoading");

        pPreIntro.setBackground(new java.awt.Color(35, 40, 50));
        pPreIntro.setFocusable(false);
        pPreIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane21.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane21.setBorder(null);
        jScrollPane21.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane21.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane21.setHorizontalScrollBar(null);
        jScrollPane21.setOpaque(false);
        jScrollPane21.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane21.setRequestFocusEnabled(false);
        jScrollPane21.setWheelScrollingEnabled(false);

        jTextArea18.setEditable(false);
        jTextArea18.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea18.setColumns(20);
        jTextArea18.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea18.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea18.setLineWrap(true);
        jTextArea18.setText("Pre-order traversal is a method used to visit nodes in a tree data structure. In pre-order traversal, the current node is visited first, followed by a recursive traversal of the left subtree, and then a recursive traversal of the right subtree. Pre-order traversal is useful for creating a copy of a tree, as it visits the nodes in the order they would be encountered if performing a pre-order insertion.");
        jTextArea18.setWrapStyleWord(true);
        jTextArea18.setAutoscrolls(false);
        jTextArea18.setBorder(null);
        jTextArea18.setFocusable(false);
        jTextArea18.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane21.setViewportView(jTextArea18);

        pPreIntro.add(jScrollPane21, java.awt.BorderLayout.CENTER);

        pOutput.add(pPreIntro, "PreIntro");

        pPreOutput.setBackground(new java.awt.Color(35, 40, 50));
        pPreOutput.setFocusable(false);
        pPreOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane23.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane23.setBorder(null);
        jScrollPane23.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane23.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane23.setHorizontalScrollBar(null);
        jScrollPane23.setOpaque(false);
        jScrollPane23.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane23.setRequestFocusEnabled(false);
        jScrollPane23.setWheelScrollingEnabled(false);

        preOutputArea.setEditable(false);
        preOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        preOutputArea.setColumns(20);
        preOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        preOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        preOutputArea.setLineWrap(true);
        preOutputArea.setWrapStyleWord(true);
        preOutputArea.setAutoscrolls(false);
        preOutputArea.setBorder(null);
        preOutputArea.setFocusable(false);
        preOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane23.setViewportView(preOutputArea);

        pPreOutput.add(jScrollPane23, java.awt.BorderLayout.CENTER);

        pOutput.add(pPreOutput, "PreOutput");

        pInIntro.setBackground(new java.awt.Color(35, 40, 50));
        pInIntro.setFocusable(false);
        pInIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane22.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane22.setBorder(null);
        jScrollPane22.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane22.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane22.setHorizontalScrollBar(null);
        jScrollPane22.setOpaque(false);
        jScrollPane22.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane22.setRequestFocusEnabled(false);
        jScrollPane22.setWheelScrollingEnabled(false);

        jTextArea19.setEditable(false);
        jTextArea19.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea19.setColumns(20);
        jTextArea19.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea19.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea19.setLineWrap(true);
        jTextArea19.setText("In-order traversal is another method to visit nodes in a tree. In in-order traversal, the left subtree is recursively traversed first, followed by visiting the current node, and finally, the right subtree is recursively traversed. In the case of binary search trees, in-order traversal visits the nodes in ascending order based on their values. In general, in-order traversal is often used to retrieve the elements of a binary search tree in sorted order.");
        jTextArea19.setWrapStyleWord(true);
        jTextArea19.setAutoscrolls(false);
        jTextArea19.setBorder(null);
        jTextArea19.setFocusable(false);
        jTextArea19.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane22.setViewportView(jTextArea19);

        pInIntro.add(jScrollPane22, java.awt.BorderLayout.CENTER);

        pOutput.add(pInIntro, "InIntro");

        pInOutput.setBackground(new java.awt.Color(35, 40, 50));
        pInOutput.setFocusable(false);
        pInOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane24.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane24.setBorder(null);
        jScrollPane24.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane24.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane24.setHorizontalScrollBar(null);
        jScrollPane24.setOpaque(false);
        jScrollPane24.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane24.setRequestFocusEnabled(false);
        jScrollPane24.setWheelScrollingEnabled(false);

        inOutputArea.setEditable(false);
        inOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        inOutputArea.setColumns(20);
        inOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        inOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        inOutputArea.setLineWrap(true);
        inOutputArea.setWrapStyleWord(true);
        inOutputArea.setAutoscrolls(false);
        inOutputArea.setBorder(null);
        inOutputArea.setFocusable(false);
        inOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane24.setViewportView(inOutputArea);

        pInOutput.add(jScrollPane24, java.awt.BorderLayout.CENTER);

        pOutput.add(pInOutput, "InOutput");

        pPostIntro.setBackground(new java.awt.Color(35, 40, 50));
        pPostIntro.setFocusable(false);
        pPostIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane25.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane25.setBorder(null);
        jScrollPane25.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane25.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane25.setHorizontalScrollBar(null);
        jScrollPane25.setOpaque(false);
        jScrollPane25.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane25.setRequestFocusEnabled(false);
        jScrollPane25.setWheelScrollingEnabled(false);

        jTextArea20.setEditable(false);
        jTextArea20.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea20.setColumns(20);
        jTextArea20.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea20.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea20.setLineWrap(true);
        jTextArea20.setText("Post-order traversal is a method to visit nodes in a tree. In post-order traversal, the left subtree is recursively traversed first, then the right subtree is recursively traversed, and finally, the current node is visited. Post-order traversal is useful for performing operations such as deleting a tree or releasing resources associated with the nodes. It ensures that child nodes are visited before their parent, making it suitable for cleaning up resources in a hierarchical structure.");
        jTextArea20.setWrapStyleWord(true);
        jTextArea20.setAutoscrolls(false);
        jTextArea20.setBorder(null);
        jTextArea20.setFocusable(false);
        jTextArea20.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane25.setViewportView(jTextArea20);

        pPostIntro.add(jScrollPane25, java.awt.BorderLayout.CENTER);

        pOutput.add(pPostIntro, "PostIntro");

        pPostOutput.setBackground(new java.awt.Color(35, 40, 50));
        pPostOutput.setFocusable(false);
        pPostOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane26.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane26.setBorder(null);
        jScrollPane26.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane26.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane26.setHorizontalScrollBar(null);
        jScrollPane26.setOpaque(false);
        jScrollPane26.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane26.setRequestFocusEnabled(false);
        jScrollPane26.setWheelScrollingEnabled(false);

        postOutputArea.setEditable(false);
        postOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        postOutputArea.setColumns(20);
        postOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        postOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        postOutputArea.setLineWrap(true);
        postOutputArea.setWrapStyleWord(true);
        postOutputArea.setAutoscrolls(false);
        postOutputArea.setBorder(null);
        postOutputArea.setFocusable(false);
        postOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane26.setViewportView(postOutputArea);

        pPostOutput.add(jScrollPane26, java.awt.BorderLayout.CENTER);

        pOutput.add(pPostOutput, "PostOutput");

        pSCenter20.add(pOutput);

        pTreeOperations.add(pSCenter20, java.awt.BorderLayout.CENTER);

        pTrees.add(pTreeOperations, "TreeOperations");

        pContainer.add(pTrees, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bBack6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack6ActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pTrees.getLayout();
        cardLayout.show(pTrees, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bBack6ActionPerformed

    private void bNext6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNext6ActionPerformed
        CardLayout cardLayout = (CardLayout) pTrees.getLayout();
        cardLayout.show(pTrees, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pTrees, "TreeOperations");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bNext6ActionPerformed

    private void bArrays1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays1MouseEntered

    private void bArrays1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays1MouseExited

    private void bArrays1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays1ActionPerformed

    private void bBack9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack9ActionPerformed
        CardLayout cardLayout = (CardLayout) pTrees.getLayout();
        cardLayout.show(pTrees, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pTrees, "TreesIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bBack9ActionPerformed

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pTrees.getLayout();
        cardLayout.show(pTrees, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bHomeActionPerformed

    private void bPreTraversalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bPreTraversalMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bPreTraversalMouseEntered

    private void bPreTraversalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bPreTraversalMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bPreTraversalMouseExited

    private void bPreTraversalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPreTraversalActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pOutput, "OLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pInput, "PreMenu");
            outputLayout.show(pOutput, "PreIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bPreTraversalActionPerformed

    private void bInTraversalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInTraversalMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bInTraversalMouseEntered

    private void bInTraversalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInTraversalMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bInTraversalMouseExited

    private void bInTraversalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInTraversalActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pOutput, "OLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pInput, "InMenu");
            outputLayout.show(pOutput, "InIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bInTraversalActionPerformed

    private void bArrays3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays3MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays3MouseEntered

    private void bArrays3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays3MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays3MouseExited

    private void bArrays3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays3ActionPerformed

    private void bSearchBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchBackActionPerformed
        switchLayouts(pInput, pOutput);
    }//GEN-LAST:event_bSearchBackActionPerformed

    private void bSearchTitleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitleMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bSearchTitleMouseEntered

    private void bSearchTitleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitleMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bSearchTitleMouseExited

    private void bSearchTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchTitleActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();
        outputLayout.show(pOutput, "AOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pOutput, "ASearchIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSearchTitleActionPerformed

    private void bPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPreActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();
        outputLayout.show(pOutput, "OLoading");

        // Perform the breadth-first search and obtain the result
        String result = performPreOrderTraversal();

        preOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pOutput, "PreOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bPreActionPerformed

    private String performPreOrderTraversal() {
    // Create an instance of DataHandler
    DataHandler dataHandler = new DataHandler();

    // Define the tree as an array representation
    int[] tree = {1, 2, 3, 4, 5};

    // Set the root node for pre-order traversal
    int root = 0;

    // Perform pre-order traversal
    String preOrderResult = dataHandler.preOrderTraversal(tree, root);

    // Create a string representation of the tree
    String treeString = Arrays.toString(tree);

    // Combine the tree and pre-order traversal result
    String output = "Tree: " + treeString + "\nPre-order Traversal Result: " + preOrderResult;

    return output;
}
    
    
    private void bArrays2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays2MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays2MouseEntered

    private void bArrays2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays2MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays2MouseExited

    private void bArrays2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays2ActionPerformed

    private void bPostTraversalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bPostTraversalMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bPostTraversalMouseEntered

    private void bPostTraversalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bPostTraversalMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bPostTraversalMouseExited

    private void bPostTraversalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPostTraversalActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pInput, "ILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pOutput, "OLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pInput, "PostMenu");
            outputLayout.show(pOutput, "PostIntro");
        });
        timer.setRepeats(false);
        timer.start();       
    }//GEN-LAST:event_bPostTraversalActionPerformed

    private void bSearchBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchBack2ActionPerformed
        switchLayouts(pInput, pOutput);
    }//GEN-LAST:event_bSearchBack2ActionPerformed

    private void bSearchTitle2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitle2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle2MouseEntered

    private void bSearchTitle2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitle2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle2MouseExited

    private void bSearchTitle2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchTitle2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle2ActionPerformed

    private void bInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInActionPerformed
    // Get a reference to the CardLayout of the pOutput panel
    CardLayout outputLayout = (CardLayout) pOutput.getLayout();
    outputLayout.show(pOutput, "OLoading");

    // Perform the in-order traversal and obtain the result
    String result = performInOrderTraversal();

    inOutputArea.setText(result);

    Timer timer = new Timer(500, (ActionEvent e) -> {
        outputLayout.show(pOutput, "InOutput");
    });
    timer.setRepeats(false);
    timer.start();
    }//GEN-LAST:event_bInActionPerformed

    private String performInOrderTraversal() {
    // Create an instance of DataHandler
    DataHandler dataHandler = new DataHandler();

    // Define the tree as an array representation
    int[] tree = {1, 2, 3, 4, 5};

    // Set the root node for in-order traversal
    int root = 0;

    // Perform in-order traversal
    String inOrderResult = dataHandler.inOrderTraversal(tree, root);

    // Create a string representation of the tree
    String treeString = Arrays.toString(tree);

    // Combine the tree and in-order traversal result
    String output = "Tree: " + treeString + "\nIn-order Traversal Result: " + inOrderResult;

    return output;
}
    
    
    private void bSearchBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchBack3ActionPerformed
        switchLayouts(pInput, pOutput);
    }//GEN-LAST:event_bSearchBack3ActionPerformed

    private void bSearchTitle3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitle3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle3MouseEntered

    private void bSearchTitle3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSearchTitle3MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle3MouseExited

    private void bSearchTitle3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchTitle3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bSearchTitle3ActionPerformed

    private void bPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPostActionPerformed
    // Get a reference to the CardLayout of the pOutput panel
    CardLayout outputLayout = (CardLayout) pOutput.getLayout();
    outputLayout.show(pOutput, "OLoading");

    // Perform the in-order traversal and obtain the result
    String result = performPostOrderTraversal();

    postOutputArea.setText(result);

    Timer timer = new Timer(500, (ActionEvent e) -> {
        outputLayout.show(pOutput, "PostOutput");
    });
    timer.setRepeats(false);
    timer.start();                                   
    }//GEN-LAST:event_bPostActionPerformed
    
    private String performPostOrderTraversal() {
     // Create an instance of DataHandler
    DataHandler dataHandler = new DataHandler();

    // Define the tree as an array representation
    int[] tree = {1, 2, 3, 4, 5};

    // Set the root node for post-order traversal
    int root = 0;

    // Perform post-order traversal
    String postOrderResult = dataHandler.postOrderTraversal(tree, root);

    // Create a string representation of the tree
    String treeString = Arrays.toString(tree);

    // Combine the tree and post-order traversal result
    String output = "Tree: " + treeString + "\nPost-order Traversal Result: " + postOrderResult;

    return output;
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TreesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TreesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TreesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TreesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TreesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bArrays1;
    private javax.swing.JButton bArrays2;
    private javax.swing.JButton bArrays3;
    private javax.swing.JButton bBack6;
    private javax.swing.JButton bBack9;
    private javax.swing.JButton bHome;
    private javax.swing.JButton bIn;
    private javax.swing.JButton bInTraversal;
    private javax.swing.JButton bNext6;
    private javax.swing.JButton bPost;
    private javax.swing.JButton bPostTraversal;
    private javax.swing.JButton bPre;
    private javax.swing.JButton bPreTraversal;
    private javax.swing.JButton bSearchBack;
    private javax.swing.JButton bSearchBack2;
    private javax.swing.JButton bSearchBack3;
    private javax.swing.JButton bSearchTitle;
    private javax.swing.JButton bSearchTitle2;
    private javax.swing.JButton bSearchTitle3;
    private javax.swing.JTextArea inOutputArea;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea18;
    private javax.swing.JTextArea jTextArea19;
    private javax.swing.JTextArea jTextArea20;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JPanel pContainer;
    private javax.swing.JPanel pILoading;
    private javax.swing.JPanel pInIntro;
    private javax.swing.JPanel pInMenu;
    private javax.swing.JPanel pInOutput;
    private javax.swing.JPanel pInput;
    private javax.swing.JPanel pLoading;
    private javax.swing.JPanel pMenus;
    private javax.swing.JPanel pOIntro;
    private javax.swing.JPanel pOLoading;
    private javax.swing.JPanel pOutput;
    private javax.swing.JPanel pPostIntro;
    private javax.swing.JPanel pPostMenu;
    private javax.swing.JPanel pPostOutput;
    private javax.swing.JPanel pPreIntro;
    private javax.swing.JPanel pPreMenu;
    private javax.swing.JPanel pPreOutput;
    private javax.swing.JPanel pSBot11;
    private javax.swing.JPanel pSBot15;
    private javax.swing.JPanel pSBot17;
    private javax.swing.JPanel pSBot18;
    private javax.swing.JPanel pSBot8;
    private javax.swing.JPanel pSCenter14;
    private javax.swing.JPanel pSCenter15;
    private javax.swing.JPanel pSCenter19;
    private javax.swing.JPanel pSCenter20;
    private javax.swing.JPanel pSCenter23;
    private javax.swing.JPanel pSCenter25;
    private javax.swing.JPanel pSCenter26;
    private javax.swing.JPanel pSTop11;
    private javax.swing.JPanel pSTop12;
    private javax.swing.JPanel pSTop17;
    private javax.swing.JPanel pSTop19;
    private javax.swing.JPanel pSTop20;
    private javax.swing.JPanel pSTop8;
    private javax.swing.JPanel pTreeOperations;
    private javax.swing.JPanel pTrees;
    private javax.swing.JPanel pTreesIntro;
    private javax.swing.JTextArea postOutputArea;
    private javax.swing.JTextArea preOutputArea;
    private javax.swing.JLabel sTitle12;
    private javax.swing.JLabel sTitle9;
    private javax.swing.JLabel structImg6;
    // End of variables declaration//GEN-END:variables
}
