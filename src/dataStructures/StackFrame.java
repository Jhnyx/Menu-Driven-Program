/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dataStructures;

import java.awt.*;
import java.awt.event.ActionEvent;
import javax.swing.*;
import handlers.DataHandler;
import handlers.FileHandler;
import main.Home;
import java.util.Stack;

/**
 *
 * @author jhnyx
 */
public class StackFrame extends javax.swing.JFrame {

    private Home home;

    /**
     * Creates new form StackFrame
     */
    public StackFrame() {
        initComponents();

        home = new Home();
    }

    private void switchStackLayouts(JPanel pSInput, JPanel pSOutput) {
        /* Stack Operations Panels */
        // Get a reference to the CardLayout of the SMenus panel
        CardLayout InputLayout = (CardLayout) pSInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        InputLayout.show(pSInput, "SILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout OutputLayout = (CardLayout) pSOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        OutputLayout.show(pSOutput, "SOLoading");

        // Set up a timer to switch back to the main menus after a delay
        Timer timer = new Timer(500, (ActionEvent e) -> {
            InputLayout.show(pSInput, "SMenus");
            OutputLayout.show(pSOutput, "SOIntro");
        });

        timer.setRepeats(false);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pContainer = new javax.swing.JPanel();
        pStack = new javax.swing.JPanel();
        pStackIntro = new javax.swing.JPanel();
        pSTop3 = new javax.swing.JPanel();
        bBack1 = new javax.swing.JButton();
        sTitle4 = new javax.swing.JLabel();
        bNext1 = new javax.swing.JButton();
        pSCenter4 = new javax.swing.JPanel();
        structImg1 = new javax.swing.JLabel();
        pSCenter5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        pSBot3 = new javax.swing.JPanel();
        pLoading = new javax.swing.JPanel();
        pSTop11 = new javax.swing.JPanel();
        pSCenter19 = new javax.swing.JPanel();
        bArrays1 = new javax.swing.JButton();
        pSBot11 = new javax.swing.JPanel();
        pStackOperations = new javax.swing.JPanel();
        pSTop13 = new javax.swing.JPanel();
        bBack10 = new javax.swing.JButton();
        sTitle13 = new javax.swing.JLabel();
        bHome = new javax.swing.JButton();
        pSCenter25 = new javax.swing.JPanel();
        pSInput = new javax.swing.JPanel();
        pSMenus = new javax.swing.JPanel();
        bStackPush = new javax.swing.JButton();
        bStackPop = new javax.swing.JButton();
        bStackPeek = new javax.swing.JButton();
        pSILoading = new javax.swing.JPanel();
        bArrays4 = new javax.swing.JButton();
        pSPush = new javax.swing.JPanel();
        pSTop20 = new javax.swing.JPanel();
        bInsertBack1 = new javax.swing.JButton();
        pSCenter27 = new javax.swing.JPanel();
        bInsertionTitle1 = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        bSDisplay = new javax.swing.JButton();
        jPanel30 = new javax.swing.JPanel();
        bEInsert2 = new javax.swing.JButton();
        jPanel31 = new javax.swing.JPanel();
        sPValue = new javax.swing.JTextField();
        jPanel32 = new javax.swing.JPanel();
        bSReset = new javax.swing.JButton();
        pSBot17 = new javax.swing.JPanel();
        bPush = new javax.swing.JButton();
        pSPop = new javax.swing.JPanel();
        pSTop21 = new javax.swing.JPanel();
        bInsertBack2 = new javax.swing.JButton();
        pSCenter28 = new javax.swing.JPanel();
        bInsertionTitle2 = new javax.swing.JButton();
        jPanel28 = new javax.swing.JPanel();
        bSDisplay1 = new javax.swing.JButton();
        jPanel33 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        pSBot18 = new javax.swing.JPanel();
        bPop = new javax.swing.JButton();
        pSPeek = new javax.swing.JPanel();
        pSTop22 = new javax.swing.JPanel();
        bInsertBack3 = new javax.swing.JButton();
        pSCenter29 = new javax.swing.JPanel();
        bInsertionTitle3 = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        bSDisplay2 = new javax.swing.JButton();
        jPanel34 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        pSBot19 = new javax.swing.JPanel();
        bPop1 = new javax.swing.JButton();
        pSOutput = new javax.swing.JPanel();
        pSOIntro = new javax.swing.JPanel();
        jScrollPane27 = new javax.swing.JScrollPane();
        jTextArea22 = new javax.swing.JTextArea();
        pSOLoading = new javax.swing.JPanel();
        bArrays5 = new javax.swing.JButton();
        pSPushIntro = new javax.swing.JPanel();
        jScrollPane31 = new javax.swing.JScrollPane();
        jTextArea25 = new javax.swing.JTextArea();
        pSPushOutput = new javax.swing.JPanel();
        jScrollPane33 = new javax.swing.JScrollPane();
        pushOutputArea = new javax.swing.JTextArea();
        pSPopIntro = new javax.swing.JPanel();
        jScrollPane34 = new javax.swing.JScrollPane();
        jTextArea27 = new javax.swing.JTextArea();
        pSPopOutput = new javax.swing.JPanel();
        jScrollPane35 = new javax.swing.JScrollPane();
        popOutputArea = new javax.swing.JTextArea();
        pSPeekIntro = new javax.swing.JPanel();
        jScrollPane36 = new javax.swing.JScrollPane();
        jTextArea28 = new javax.swing.JTextArea();
        pSPeekOutput = new javax.swing.JPanel();
        jScrollPane37 = new javax.swing.JScrollPane();
        peekOutputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        pContainer.setLayout(new java.awt.BorderLayout());

        pStack.setMaximumSize(new java.awt.Dimension(1280, 720));
        pStack.setRequestFocusEnabled(false);
        pStack.setLayout(new java.awt.CardLayout());

        pStackIntro.setBackground(new java.awt.Color(35, 40, 50));
        pStackIntro.setMinimumSize(new java.awt.Dimension(1280, 720));
        pStackIntro.setPreferredSize(new java.awt.Dimension(1280, 720));
        pStackIntro.setLayout(new java.awt.BorderLayout());

        pSTop3.setBackground(new java.awt.Color(24, 25, 28));
        pSTop3.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack1.setBackground(new java.awt.Color(24, 25, 28));
        bBack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack1.setBorder(null);
        bBack1.setBorderPainted(false);
        bBack1.setContentAreaFilled(false);
        bBack1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack1ActionPerformed(evt);
            }
        });
        pSTop3.add(bBack1);

        sTitle4.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle4.setForeground(new java.awt.Color(255, 255, 255));
        sTitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle4.setText("STACK");
        sTitle4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle4.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle4.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle4.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle4.setRequestFocusEnabled(false);
        pSTop3.add(sTitle4);

        bNext1.setBackground(new java.awt.Color(24, 25, 28));
        bNext1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/next_icon.png"))); // NOI18N
        bNext1.setBorder(null);
        bNext1.setBorderPainted(false);
        bNext1.setContentAreaFilled(false);
        bNext1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bNext1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_next_icon.png"))); // NOI18N
        bNext1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNext1ActionPerformed(evt);
            }
        });
        pSTop3.add(bNext1);

        pStackIntro.add(pSTop3, java.awt.BorderLayout.PAGE_START);

        pSCenter4.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter4.setLayout(new java.awt.BorderLayout());

        structImg1.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        structImg1.setForeground(new java.awt.Color(255, 255, 255));
        structImg1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        structImg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/stack_gif.gif"))); // NOI18N
        structImg1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pSCenter4.add(structImg1, java.awt.BorderLayout.WEST);

        pSCenter5.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jScrollPane2.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setHorizontalScrollBar(null);
        jScrollPane2.setOpaque(false);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(750, 1000));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Russo One", 0, 22)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setLineWrap(true);
        jTextArea2.setText("A stack is a data structure in programming that stores and retrieves elements in a last-in-first-out (LIFO) manner. This means that the last element added to the stack is the first to be removed from it.\n\nThe two fundamental operations of a stack are push, which adds an element to the top of the stack, and pop, which removes the top element from the stack. You can also peek at the top element without removing it, and check if the stack is empty.\n\nStacks are used in programming for tasks such as parsing expressions, checking for balanced parentheses, and implementing backtracking algorithms. They are also used in memory management, where they store function calls and local variables. Stacks can be implemented using arrays or linked lists, and they have a fixed capacity or can grow dynamically. Overall, stacks are an efficient and easy-to-use data structure that is widely used in programming for various applications.");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setAutoscrolls(false);
        jTextArea2.setBorder(null);
        jTextArea2.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea2);

        pSCenter5.add(jScrollPane2);

        pSCenter4.add(pSCenter5, java.awt.BorderLayout.CENTER);

        pStackIntro.add(pSCenter4, java.awt.BorderLayout.CENTER);

        pSBot3.setBackground(new java.awt.Color(35, 40, 50));
        pSBot3.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pStackIntro.add(pSBot3, java.awt.BorderLayout.SOUTH);

        pStack.add(pStackIntro, "StackIntro");

        pLoading.setBackground(new java.awt.Color(35, 40, 50));
        pLoading.setMinimumSize(new java.awt.Dimension(1280, 720));
        pLoading.setPreferredSize(new java.awt.Dimension(1280, 720));
        pLoading.setLayout(new java.awt.BorderLayout());

        pSTop11.setBackground(new java.awt.Color(35, 40, 50));
        pSTop11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 25));
        pLoading.add(pSTop11, java.awt.BorderLayout.NORTH);

        pSCenter19.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter19.setLayout(new java.awt.GridLayout(1, 0));

        bArrays1.setBackground(new java.awt.Color(35, 40, 50));
        bArrays1.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays1.setForeground(new java.awt.Color(255, 255, 255));
        bArrays1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/loading_gif.gif"))); // NOI18N
        bArrays1.setText("LOADING...");
        bArrays1.setBorder(null);
        bArrays1.setBorderPainted(false);
        bArrays1.setContentAreaFilled(false);
        bArrays1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays1MouseExited(evt);
            }
        });
        bArrays1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays1ActionPerformed(evt);
            }
        });
        pSCenter19.add(bArrays1);

        pLoading.add(pSCenter19, java.awt.BorderLayout.CENTER);

        pSBot11.setBackground(new java.awt.Color(35, 40, 50));
        pSBot11.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));
        pLoading.add(pSBot11, java.awt.BorderLayout.SOUTH);

        pStack.add(pLoading, "Loading");

        pStackOperations.setBackground(new java.awt.Color(35, 40, 50));
        pStackOperations.setMinimumSize(new java.awt.Dimension(1280, 720));
        pStackOperations.setPreferredSize(new java.awt.Dimension(1280, 720));
        pStackOperations.setLayout(new java.awt.BorderLayout());

        pSTop13.setBackground(new java.awt.Color(24, 25, 28));
        pSTop13.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 0));

        bBack10.setBackground(new java.awt.Color(24, 25, 28));
        bBack10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/back_icon.png"))); // NOI18N
        bBack10.setBorder(null);
        bBack10.setBorderPainted(false);
        bBack10.setContentAreaFilled(false);
        bBack10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bBack10.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_back_icon.png"))); // NOI18N
        bBack10.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bBack10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack10ActionPerformed(evt);
            }
        });
        pSTop13.add(bBack10);

        sTitle13.setFont(new java.awt.Font("Russo One", 1, 48)); // NOI18N
        sTitle13.setForeground(new java.awt.Color(255, 255, 255));
        sTitle13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sTitle13.setText("STACK OPERATIONS");
        sTitle13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sTitle13.setMaximumSize(new java.awt.Dimension(0, 0));
        sTitle13.setMinimumSize(new java.awt.Dimension(0, 0));
        sTitle13.setPreferredSize(new java.awt.Dimension(700, 100));
        sTitle13.setRequestFocusEnabled(false);
        pSTop13.add(sTitle13);

        bHome.setBackground(new java.awt.Color(24, 25, 28));
        bHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/home_icon.png"))); // NOI18N
        bHome.setBorder(null);
        bHome.setBorderPainted(false);
        bHome.setContentAreaFilled(false);
        bHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bHome.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_home_icon.png"))); // NOI18N
        bHome.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHomeActionPerformed(evt);
            }
        });
        pSTop13.add(bHome);

        pStackOperations.add(pSTop13, java.awt.BorderLayout.PAGE_START);

        pSCenter25.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 0));

        pSInput.setBackground(new java.awt.Color(35, 40, 50));
        pSInput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pSInput.setForeground(new java.awt.Color(255, 255, 255));
        pSInput.setPreferredSize(new java.awt.Dimension(550, 600));
        pSInput.setLayout(new java.awt.CardLayout());

        pSMenus.setBackground(new java.awt.Color(35, 40, 50));
        pSMenus.setLayout(new java.awt.GridLayout(3, 0));

        bStackPush.setBackground(new java.awt.Color(35, 40, 50));
        bStackPush.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bStackPush.setForeground(new java.awt.Color(255, 255, 255));
        bStackPush.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_push_gif.gif"))); // NOI18N
        bStackPush.setText("PUSH");
        bStackPush.setBorder(null);
        bStackPush.setBorderPainted(false);
        bStackPush.setContentAreaFilled(false);
        bStackPush.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bStackPush.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bStackPush.setPreferredSize(new java.awt.Dimension(200, 100));
        bStackPush.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bStackPushMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bStackPushMouseExited(evt);
            }
        });
        bStackPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStackPushActionPerformed(evt);
            }
        });
        pSMenus.add(bStackPush);

        bStackPop.setBackground(new java.awt.Color(35, 40, 50));
        bStackPop.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bStackPop.setForeground(new java.awt.Color(255, 255, 255));
        bStackPop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_pop_gif.gif"))); // NOI18N
        bStackPop.setText("POP");
        bStackPop.setBorder(null);
        bStackPop.setBorderPainted(false);
        bStackPop.setContentAreaFilled(false);
        bStackPop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bStackPop.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bStackPop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bStackPopMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bStackPopMouseExited(evt);
            }
        });
        bStackPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStackPopActionPerformed(evt);
            }
        });
        pSMenus.add(bStackPop);

        bStackPeek.setBackground(new java.awt.Color(35, 40, 50));
        bStackPeek.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bStackPeek.setForeground(new java.awt.Color(255, 255, 255));
        bStackPeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_peek_gif.gif"))); // NOI18N
        bStackPeek.setText("PEEK");
        bStackPeek.setBorder(null);
        bStackPeek.setBorderPainted(false);
        bStackPeek.setContentAreaFilled(false);
        bStackPeek.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bStackPeek.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bStackPeek.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bStackPeekMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bStackPeekMouseExited(evt);
            }
        });
        bStackPeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStackPeekActionPerformed(evt);
            }
        });
        pSMenus.add(bStackPeek);

        pSInput.add(pSMenus, "SMenus");

        pSILoading.setBackground(new java.awt.Color(35, 40, 50));
        pSILoading.setLayout(new java.awt.BorderLayout());

        bArrays4.setBackground(new java.awt.Color(35, 40, 50));
        bArrays4.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays4.setForeground(new java.awt.Color(255, 255, 255));
        bArrays4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays4.setText("LOADING...");
        bArrays4.setBorder(null);
        bArrays4.setBorderPainted(false);
        bArrays4.setContentAreaFilled(false);
        bArrays4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays4MouseExited(evt);
            }
        });
        bArrays4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays4ActionPerformed(evt);
            }
        });
        pSILoading.add(bArrays4, java.awt.BorderLayout.CENTER);

        pSInput.add(pSILoading, "SILoading");

        pSPush.setBackground(new java.awt.Color(35, 40, 50));
        pSPush.setLayout(new java.awt.BorderLayout());

        pSTop20.setBackground(new java.awt.Color(35, 40, 50));
        pSTop20.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bInsertBack1.setBackground(new java.awt.Color(24, 25, 28));
        bInsertBack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bInsertBack1.setBorder(null);
        bInsertBack1.setBorderPainted(false);
        bInsertBack1.setContentAreaFilled(false);
        bInsertBack1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertBack1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bInsertBack1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertBack1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bInsertBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertBack1ActionPerformed(evt);
            }
        });
        pSTop20.add(bInsertBack1);

        pSPush.add(pSTop20, java.awt.BorderLayout.NORTH);

        pSCenter27.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter27.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bInsertionTitle1.setBackground(new java.awt.Color(35, 40, 50));
        bInsertionTitle1.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bInsertionTitle1.setForeground(new java.awt.Color(255, 255, 255));
        bInsertionTitle1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_push_gif.gif"))); // NOI18N
        bInsertionTitle1.setText("PUSH");
        bInsertionTitle1.setBorder(null);
        bInsertionTitle1.setBorderPainted(false);
        bInsertionTitle1.setContentAreaFilled(false);
        bInsertionTitle1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertionTitle1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertionTitle1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bInsertionTitle1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInsertionTitle1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInsertionTitle1MouseExited(evt);
            }
        });
        bInsertionTitle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertionTitle1ActionPerformed(evt);
            }
        });
        pSCenter27.add(bInsertionTitle1);

        jPanel27.setBackground(new java.awt.Color(35, 40, 50));
        jPanel27.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter27.add(jPanel27);

        bSDisplay.setBackground(new java.awt.Color(35, 40, 50));
        bSDisplay.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSDisplay.setForeground(new java.awt.Color(255, 255, 255));
        bSDisplay.setText("DISPLAY");
        bSDisplay.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSDisplay.setContentAreaFilled(false);
        bSDisplay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSDisplay.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSDisplayMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSDisplayMouseExited(evt);
            }
        });
        bSDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSDisplayActionPerformed(evt);
            }
        });
        pSCenter27.add(bSDisplay);

        jPanel30.setBackground(new java.awt.Color(35, 40, 50));
        jPanel30.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter27.add(jPanel30);

        bEInsert2.setBackground(new java.awt.Color(35, 40, 50));
        bEInsert2.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bEInsert2.setForeground(new java.awt.Color(255, 255, 255));
        bEInsert2.setText("Enter element To PUSH");
        bEInsert2.setBorder(null);
        bEInsert2.setBorderPainted(false);
        bEInsert2.setContentAreaFilled(false);
        bEInsert2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bEInsert2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bEInsert2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bEInsert2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bEInsert2MouseExited(evt);
            }
        });
        bEInsert2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEInsert2ActionPerformed(evt);
            }
        });
        pSCenter27.add(bEInsert2);

        jPanel31.setBackground(new java.awt.Color(35, 40, 50));
        jPanel31.setPreferredSize(new java.awt.Dimension(1000, 10));

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter27.add(jPanel31);

        sPValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sPValue.setText("0");
        sPValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Value", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 0, 10))); // NOI18N
        sPValue.setMinimumSize(new java.awt.Dimension(0, 0));
        sPValue.setOpaque(true);
        sPValue.setPreferredSize(new java.awt.Dimension(50, 50));
        sPValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sPValueActionPerformed(evt);
            }
        });
        pSCenter27.add(sPValue);

        jPanel32.setBackground(new java.awt.Color(35, 40, 50));
        jPanel32.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter27.add(jPanel32);

        bSReset.setBackground(new java.awt.Color(35, 40, 50));
        bSReset.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSReset.setForeground(new java.awt.Color(255, 255, 255));
        bSReset.setText("RESET");
        bSReset.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSReset.setContentAreaFilled(false);
        bSReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSReset.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSResetMouseExited(evt);
            }
        });
        bSReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSResetActionPerformed(evt);
            }
        });
        pSCenter27.add(bSReset);

        pSPush.add(pSCenter27, java.awt.BorderLayout.CENTER);

        pSBot17.setBackground(new java.awt.Color(35, 40, 50));
        pSBot17.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bPush.setBackground(new java.awt.Color(24, 25, 28));
        bPush.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bPush.setBorder(null);
        bPush.setBorderPainted(false);
        bPush.setContentAreaFilled(false);
        bPush.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPush.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPush.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPushActionPerformed(evt);
            }
        });
        pSBot17.add(bPush);

        pSPush.add(pSBot17, java.awt.BorderLayout.SOUTH);

        pSInput.add(pSPush, "SPushMenu");

        pSPop.setBackground(new java.awt.Color(35, 40, 50));
        pSPop.setLayout(new java.awt.BorderLayout());

        pSTop21.setBackground(new java.awt.Color(35, 40, 50));
        pSTop21.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bInsertBack2.setBackground(new java.awt.Color(24, 25, 28));
        bInsertBack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bInsertBack2.setBorder(null);
        bInsertBack2.setBorderPainted(false);
        bInsertBack2.setContentAreaFilled(false);
        bInsertBack2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertBack2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bInsertBack2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertBack2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bInsertBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertBack2ActionPerformed(evt);
            }
        });
        pSTop21.add(bInsertBack2);

        pSPop.add(pSTop21, java.awt.BorderLayout.NORTH);

        pSCenter28.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter28.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bInsertionTitle2.setBackground(new java.awt.Color(35, 40, 50));
        bInsertionTitle2.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bInsertionTitle2.setForeground(new java.awt.Color(255, 255, 255));
        bInsertionTitle2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_op_pop_gif.gif"))); // NOI18N
        bInsertionTitle2.setText("POP");
        bInsertionTitle2.setBorder(null);
        bInsertionTitle2.setBorderPainted(false);
        bInsertionTitle2.setContentAreaFilled(false);
        bInsertionTitle2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertionTitle2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertionTitle2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bInsertionTitle2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInsertionTitle2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInsertionTitle2MouseExited(evt);
            }
        });
        bInsertionTitle2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertionTitle2ActionPerformed(evt);
            }
        });
        pSCenter28.add(bInsertionTitle2);

        jPanel28.setBackground(new java.awt.Color(35, 40, 50));
        jPanel28.setPreferredSize(new java.awt.Dimension(1000, 100));

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter28.add(jPanel28);

        bSDisplay1.setBackground(new java.awt.Color(35, 40, 50));
        bSDisplay1.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSDisplay1.setForeground(new java.awt.Color(255, 255, 255));
        bSDisplay1.setText("DISPLAY");
        bSDisplay1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSDisplay1.setContentAreaFilled(false);
        bSDisplay1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSDisplay1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSDisplay1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSDisplay1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSDisplay1MouseExited(evt);
            }
        });
        bSDisplay1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSDisplay1ActionPerformed(evt);
            }
        });
        pSCenter28.add(bSDisplay1);

        jPanel33.setBackground(new java.awt.Color(35, 40, 50));
        jPanel33.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter28.add(jPanel33);

        jPanel35.setBackground(new java.awt.Color(35, 40, 50));
        jPanel35.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter28.add(jPanel35);

        pSPop.add(pSCenter28, java.awt.BorderLayout.CENTER);

        pSBot18.setBackground(new java.awt.Color(35, 40, 50));
        pSBot18.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bPop.setBackground(new java.awt.Color(24, 25, 28));
        bPop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bPop.setBorder(null);
        bPop.setBorderPainted(false);
        bPop.setContentAreaFilled(false);
        bPop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPop.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPopActionPerformed(evt);
            }
        });
        pSBot18.add(bPop);

        pSPop.add(pSBot18, java.awt.BorderLayout.SOUTH);

        pSInput.add(pSPop, "SPopMenu");

        pSPeek.setBackground(new java.awt.Color(35, 40, 50));
        pSPeek.setLayout(new java.awt.BorderLayout());

        pSTop22.setBackground(new java.awt.Color(35, 40, 50));
        pSTop22.setPreferredSize(new java.awt.Dimension(0, 100));
        pSTop22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 55, 25));

        bInsertBack3.setBackground(new java.awt.Color(24, 25, 28));
        bInsertBack3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/go_back_icon.png"))); // NOI18N
        bInsertBack3.setBorder(null);
        bInsertBack3.setBorderPainted(false);
        bInsertBack3.setContentAreaFilled(false);
        bInsertBack3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertBack3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bInsertBack3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertBack3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_go_back_icon.png"))); // NOI18N
        bInsertBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertBack3ActionPerformed(evt);
            }
        });
        pSTop22.add(bInsertBack3);

        pSPeek.add(pSTop22, java.awt.BorderLayout.NORTH);

        pSCenter29.setBackground(new java.awt.Color(35, 40, 50));
        pSCenter29.setPreferredSize(new java.awt.Dimension(0, 0));
        pSCenter29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

        bInsertionTitle3.setBackground(new java.awt.Color(35, 40, 50));
        bInsertionTitle3.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bInsertionTitle3.setForeground(new java.awt.Color(255, 255, 255));
        bInsertionTitle3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/op_peek_gif.gif"))); // NOI18N
        bInsertionTitle3.setText("PEEK");
        bInsertionTitle3.setBorder(null);
        bInsertionTitle3.setBorderPainted(false);
        bInsertionTitle3.setContentAreaFilled(false);
        bInsertionTitle3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bInsertionTitle3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bInsertionTitle3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        bInsertionTitle3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bInsertionTitle3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bInsertionTitle3MouseExited(evt);
            }
        });
        bInsertionTitle3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertionTitle3ActionPerformed(evt);
            }
        });
        pSCenter29.add(bInsertionTitle3);

        jPanel29.setBackground(new java.awt.Color(35, 40, 50));
        jPanel29.setPreferredSize(new java.awt.Dimension(1000, 100));

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter29.add(jPanel29);

        bSDisplay2.setBackground(new java.awt.Color(35, 40, 50));
        bSDisplay2.setFont(new java.awt.Font("Russo One", 0, 24)); // NOI18N
        bSDisplay2.setForeground(new java.awt.Color(255, 255, 255));
        bSDisplay2.setText("DISPLAY");
        bSDisplay2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSDisplay2.setContentAreaFilled(false);
        bSDisplay2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bSDisplay2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bSDisplay2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bSDisplay2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bSDisplay2MouseExited(evt);
            }
        });
        bSDisplay2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSDisplay2ActionPerformed(evt);
            }
        });
        pSCenter29.add(bSDisplay2);

        jPanel34.setBackground(new java.awt.Color(35, 40, 50));
        jPanel34.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        pSCenter29.add(jPanel34);

        jPanel36.setBackground(new java.awt.Color(35, 40, 50));
        jPanel36.setPreferredSize(new java.awt.Dimension(1000, 25));

        javax.swing.GroupLayout jPanel36Layout = new javax.swing.GroupLayout(jPanel36);
        jPanel36.setLayout(jPanel36Layout);
        jPanel36Layout.setHorizontalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel36Layout.setVerticalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pSCenter29.add(jPanel36);

        pSPeek.add(pSCenter29, java.awt.BorderLayout.CENTER);

        pSBot19.setBackground(new java.awt.Color(35, 40, 50));
        pSBot19.setPreferredSize(new java.awt.Dimension(0, 100));
        pSBot19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 500, 0));

        bPop1.setBackground(new java.awt.Color(24, 25, 28));
        bPop1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/submit_icon.png"))); // NOI18N
        bPop1.setBorder(null);
        bPop1.setBorderPainted(false);
        bPop1.setContentAreaFilled(false);
        bPop1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bPop1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPop1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rollover_submit_icon.png"))); // NOI18N
        bPop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPop1ActionPerformed(evt);
            }
        });
        pSBot19.add(bPop1);

        pSPeek.add(pSBot19, java.awt.BorderLayout.SOUTH);

        pSInput.add(pSPeek, "SPeekMenu");

        pSCenter25.add(pSInput);

        pSOutput.setBackground(new java.awt.Color(35, 40, 50));
        pSOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OUTPUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Russo One", 2, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pSOutput.setForeground(new java.awt.Color(255, 255, 255));
        pSOutput.setPreferredSize(new java.awt.Dimension(550, 600));
        pSOutput.setLayout(new java.awt.CardLayout());

        pSOIntro.setBackground(new java.awt.Color(35, 40, 50));
        pSOIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane27.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane27.setBorder(null);
        jScrollPane27.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane27.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane27.setHorizontalScrollBar(null);
        jScrollPane27.setOpaque(false);
        jScrollPane27.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane27.setRequestFocusEnabled(false);
        jScrollPane27.setWheelScrollingEnabled(false);

        jTextArea22.setEditable(false);
        jTextArea22.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea22.setColumns(20);
        jTextArea22.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea22.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea22.setLineWrap(true);
        jTextArea22.setText("Hey there, curious clicker! Want to know more about the buttons on this screen? Well, it's as easy as a single click or tap! Just pick a button on the left that piques your interest and voila! A magical description will appear before your very eyes! It's like having a button whisperer in your pocket! This nifty feature is here to help you navigate and understand this interface, so don't be shy, give those buttons a click and unlock their secrets!");
        jTextArea22.setWrapStyleWord(true);
        jTextArea22.setAutoscrolls(false);
        jTextArea22.setBorder(null);
        jTextArea22.setFocusable(false);
        jTextArea22.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane27.setViewportView(jTextArea22);

        pSOIntro.add(jScrollPane27, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSOIntro, "SOIntro");

        pSOLoading.setBackground(new java.awt.Color(35, 40, 50));
        pSOLoading.setLayout(new java.awt.BorderLayout());

        bArrays5.setBackground(new java.awt.Color(35, 40, 50));
        bArrays5.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        bArrays5.setForeground(new java.awt.Color(255, 255, 255));
        bArrays5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/animations/small_loading_gif.gif"))); // NOI18N
        bArrays5.setText("LOADING...");
        bArrays5.setBorder(null);
        bArrays5.setBorderPainted(false);
        bArrays5.setContentAreaFilled(false);
        bArrays5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bArrays5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bArrays5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bArrays5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bArrays5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bArrays5MouseExited(evt);
            }
        });
        bArrays5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArrays5ActionPerformed(evt);
            }
        });
        pSOLoading.add(bArrays5, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSOLoading, "SOLoading");

        pSPushIntro.setBackground(new java.awt.Color(35, 40, 50));
        pSPushIntro.setFocusable(false);
        pSPushIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane31.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane31.setBorder(null);
        jScrollPane31.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane31.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane31.setHorizontalScrollBar(null);
        jScrollPane31.setOpaque(false);
        jScrollPane31.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane31.setRequestFocusEnabled(false);
        jScrollPane31.setWheelScrollingEnabled(false);

        jTextArea25.setEditable(false);
        jTextArea25.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea25.setColumns(20);
        jTextArea25.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea25.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea25.setLineWrap(true);
        jTextArea25.setText("Push operation, as the name suggests, is used to add an element to the top of the stack. When an element is pushed onto a stack, it becomes the new top element of the stack. This operation modifies the state of the stack, and any subsequent operations on the stack will reflect this change. Push operation is useful in situations where you need to store elements in a specific order and retrieve them in reverse order.\n\nBy using push operation, you can add elements to the stack and keep track of the order in which they were added. This operation is commonly used in various programming languages and applications to implement algorithms such as recursion, backtracking, and expression evaluation.");
        jTextArea25.setWrapStyleWord(true);
        jTextArea25.setAutoscrolls(false);
        jTextArea25.setBorder(null);
        jTextArea25.setFocusable(false);
        jTextArea25.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane31.setViewportView(jTextArea25);

        pSPushIntro.add(jScrollPane31, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSPushIntro, "SPushIntro");

        pSPushOutput.setBackground(new java.awt.Color(35, 40, 50));
        pSPushOutput.setFocusable(false);
        pSPushOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane33.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane33.setBorder(null);
        jScrollPane33.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane33.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane33.setHorizontalScrollBar(null);
        jScrollPane33.setOpaque(false);
        jScrollPane33.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane33.setRequestFocusEnabled(false);
        jScrollPane33.setWheelScrollingEnabled(false);

        pushOutputArea.setEditable(false);
        pushOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        pushOutputArea.setColumns(20);
        pushOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        pushOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        pushOutputArea.setLineWrap(true);
        pushOutputArea.setWrapStyleWord(true);
        pushOutputArea.setAutoscrolls(false);
        pushOutputArea.setBorder(null);
        pushOutputArea.setFocusable(false);
        pushOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane33.setViewportView(pushOutputArea);

        pSPushOutput.add(jScrollPane33, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSPushOutput, "SPushOutput");

        pSPopIntro.setBackground(new java.awt.Color(35, 40, 50));
        pSPopIntro.setFocusable(false);
        pSPopIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane34.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane34.setBorder(null);
        jScrollPane34.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane34.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane34.setHorizontalScrollBar(null);
        jScrollPane34.setOpaque(false);
        jScrollPane34.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane34.setRequestFocusEnabled(false);
        jScrollPane34.setWheelScrollingEnabled(false);

        jTextArea27.setEditable(false);
        jTextArea27.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea27.setColumns(20);
        jTextArea27.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea27.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea27.setLineWrap(true);
        jTextArea27.setText("The pop operation in a stack retrieves and removes the element that is currently at the top of the stack. After the pop operation is performed, the top of the stack will be the element that was just below the one that was removed.\n\nIt is important to note that the pop operation can only be performed on a non-empty stack. Attempting to pop an element from an empty stack will result in an error, known as a stack underflow.");
        jTextArea27.setWrapStyleWord(true);
        jTextArea27.setAutoscrolls(false);
        jTextArea27.setBorder(null);
        jTextArea27.setFocusable(false);
        jTextArea27.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane34.setViewportView(jTextArea27);

        pSPopIntro.add(jScrollPane34, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSPopIntro, "SPopIntro");

        pSPopOutput.setBackground(new java.awt.Color(35, 40, 50));
        pSPopOutput.setFocusable(false);
        pSPopOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane35.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane35.setBorder(null);
        jScrollPane35.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane35.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane35.setHorizontalScrollBar(null);
        jScrollPane35.setOpaque(false);
        jScrollPane35.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane35.setRequestFocusEnabled(false);
        jScrollPane35.setWheelScrollingEnabled(false);

        popOutputArea.setEditable(false);
        popOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        popOutputArea.setColumns(20);
        popOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        popOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        popOutputArea.setLineWrap(true);
        popOutputArea.setWrapStyleWord(true);
        popOutputArea.setAutoscrolls(false);
        popOutputArea.setBorder(null);
        popOutputArea.setFocusable(false);
        popOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane35.setViewportView(popOutputArea);

        pSPopOutput.add(jScrollPane35, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSPopOutput, "SPopOutput");

        pSPeekIntro.setBackground(new java.awt.Color(35, 40, 50));
        pSPeekIntro.setFocusable(false);
        pSPeekIntro.setLayout(new java.awt.BorderLayout());

        jScrollPane36.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane36.setBorder(null);
        jScrollPane36.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane36.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane36.setHorizontalScrollBar(null);
        jScrollPane36.setOpaque(false);
        jScrollPane36.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane36.setRequestFocusEnabled(false);
        jScrollPane36.setWheelScrollingEnabled(false);

        jTextArea28.setEditable(false);
        jTextArea28.setBackground(new java.awt.Color(35, 40, 50));
        jTextArea28.setColumns(20);
        jTextArea28.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        jTextArea28.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea28.setLineWrap(true);
        jTextArea28.setText("In a stack data structure, the peek operation refers to accessing the value of the element at the topmost position of the stack without removing it. It is useful for examining the value of the topmost element of the stack, without changing the state of the stack. This operation can be used to check if the stack is empty, examine the value of the element at the top of the stack, or even to implement some algorithms that require the value of the top element without removing it.");
        jTextArea28.setWrapStyleWord(true);
        jTextArea28.setAutoscrolls(false);
        jTextArea28.setBorder(null);
        jTextArea28.setFocusable(false);
        jTextArea28.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane36.setViewportView(jTextArea28);

        pSPeekIntro.add(jScrollPane36, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSPeekIntro, "SPeekIntro");

        pSPeekOutput.setBackground(new java.awt.Color(35, 40, 50));
        pSPeekOutput.setFocusable(false);
        pSPeekOutput.setLayout(new java.awt.BorderLayout());

        jScrollPane37.setBackground(new java.awt.Color(35, 40, 50));
        jScrollPane37.setBorder(null);
        jScrollPane37.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane37.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane37.setHorizontalScrollBar(null);
        jScrollPane37.setOpaque(false);
        jScrollPane37.setPreferredSize(new java.awt.Dimension(750, 1000));
        jScrollPane37.setRequestFocusEnabled(false);
        jScrollPane37.setWheelScrollingEnabled(false);

        peekOutputArea.setEditable(false);
        peekOutputArea.setBackground(new java.awt.Color(35, 40, 50));
        peekOutputArea.setColumns(20);
        peekOutputArea.setFont(new java.awt.Font("Russo One", 0, 18)); // NOI18N
        peekOutputArea.setForeground(new java.awt.Color(255, 255, 255));
        peekOutputArea.setLineWrap(true);
        peekOutputArea.setWrapStyleWord(true);
        peekOutputArea.setAutoscrolls(false);
        peekOutputArea.setBorder(null);
        peekOutputArea.setFocusable(false);
        peekOutputArea.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane37.setViewportView(peekOutputArea);

        pSPeekOutput.add(jScrollPane37, java.awt.BorderLayout.CENTER);

        pSOutput.add(pSPeekOutput, "SPeekOutput");

        pSCenter25.add(pSOutput);

        pStackOperations.add(pSCenter25, java.awt.BorderLayout.CENTER);

        pStack.add(pStackOperations, "StackOperations");

        pContainer.add(pStack, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bArrays1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bArrays1MouseEntered

    private void bArrays1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays1MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bArrays1MouseExited

    private void bArrays1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays1ActionPerformed

    private void bBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack1ActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pStack.getLayout();
        cardLayout.show(pStack, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();

    }//GEN-LAST:event_bBack1ActionPerformed

    private void bNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNext1ActionPerformed
        CardLayout cardLayout = (CardLayout) pStack.getLayout();
        cardLayout.show(pStack, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pStack, "StackOperations");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bNext1ActionPerformed

    private void bBack10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack10ActionPerformed
        CardLayout cardLayout = (CardLayout) pStack.getLayout();
        cardLayout.show(pStack, "Loading");
        Timer timer = new Timer(500, (ActionEvent e) -> {
            cardLayout.show(pStack, "StackIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bBack10ActionPerformed

    private void bStackPushMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStackPushMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bStackPushMouseEntered

    private void bStackPushMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStackPushMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bStackPushMouseExited

    private void bStackPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStackPushActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pSInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pSInput, "SILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pSOutput, "SOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pSInput, "SPushMenu");
            outputLayout.show(pSOutput, "SPushIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bStackPushActionPerformed

    private void bStackPopMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStackPopMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bStackPopMouseEntered

    private void bStackPopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStackPopMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bStackPopMouseExited

    private void bStackPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStackPopActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pSInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pSInput, "SILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pSOutput, "SOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pSInput, "SPopMenu");
            outputLayout.show(pSOutput, "SPopIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bStackPopActionPerformed

    private void bStackPeekMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStackPeekMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bStackPeekMouseEntered

    private void bStackPeekMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStackPeekMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bStackPeekMouseExited

    private void bStackPeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStackPeekActionPerformed
        // Get a reference to the CardLayout of the pInput panel
        CardLayout inputLayout = (CardLayout) pSInput.getLayout();

        // Show the "ILoading" card in the pInput panel
        inputLayout.show(pSInput, "SILoading");

        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();

        // Show the "OLoading" card in the pOutput panel
        outputLayout.show(pSOutput, "SOLoading");

        Timer timer = new Timer(500, (ActionEvent e) -> {
            inputLayout.show(pSInput, "SPeekMenu");
            outputLayout.show(pSOutput, "SPeekIntro");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bStackPeekActionPerformed

    private void bArrays4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays4MouseEntered

    private void bArrays4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays4MouseExited

    private void bArrays4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays4ActionPerformed

    private void bInsertBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertBack1ActionPerformed
        switchStackLayouts(pSInput, pSOutput);
    }//GEN-LAST:event_bInsertBack1ActionPerformed

    private void bInsertionTitle1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle1MouseEntered

    private void bInsertionTitle1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle1MouseExited

    private void bInsertionTitle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertionTitle1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle1ActionPerformed

    private void bSDisplayMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplayMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bSDisplayMouseEntered

    private void bSDisplayMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplayMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bSDisplayMouseExited

    private void bSDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSDisplayActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Load the stack from the file
        Stack<Integer> stack = FileHandler.loadStackInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, stack, null);
        String result = operations.display();

        pushOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPushOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSDisplayActionPerformed

    private void bEInsert2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bEInsert2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bEInsert2MouseEntered

    private void bEInsert2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bEInsert2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bEInsert2MouseExited

    private void bEInsert2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEInsert2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bEInsert2ActionPerformed

    private void sPValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sPValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sPValueActionPerformed

    private void bSResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSResetMouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bSResetMouseEntered

    private void bSResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSResetMouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bSResetMouseExited

    private void bSResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSResetActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Create a new, empty stack
        Stack<Integer> stack = new Stack<>();

        // Pass both array and stack to the constructor
        String result = "Stack has been cleared!";

        // Save the updated stack to a file
        FileHandler.saveStackInputValues(stack);

        pushOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPushOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSResetActionPerformed

    private void bPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPushActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Load the stack from the file
        Stack<Integer> stack = FileHandler.loadStackInputValues();

        int value = Integer.parseInt(sPValue.getText());

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, stack, null);
        String result = operations.push(value);

        // Save the updated stack to a file
        FileHandler.saveStackInputValues(stack);

        pushOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPushOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bPushActionPerformed

    private void bInsertBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertBack2ActionPerformed
        switchStackLayouts(pSInput, pSOutput);
    }//GEN-LAST:event_bInsertBack2ActionPerformed

    private void bInsertionTitle2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle2MouseEntered

    private void bInsertionTitle2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle2MouseExited

    private void bInsertionTitle2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertionTitle2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle2ActionPerformed

    private void bSDisplay1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay1MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bSDisplay1MouseEntered

    private void bSDisplay1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay1MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bSDisplay1MouseExited

    private void bSDisplay1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSDisplay1ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Load the stack from the file
        Stack<Integer> stack = FileHandler.loadStackInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, stack, null);
        String result = operations.display();

        popOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPopOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSDisplay1ActionPerformed

    private void bPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPopActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Load the stack from the file
        Stack<Integer> stack = FileHandler.loadStackInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, stack, null);
        String result = operations.pop();

        // Save the updated stack to a file
        FileHandler.saveStackInputValues(stack);

        popOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPopOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bPopActionPerformed

    private void bInsertBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertBack3ActionPerformed
        switchStackLayouts(pSInput, pSOutput);
    }//GEN-LAST:event_bInsertBack3ActionPerformed

    private void bInsertionTitle3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle3MouseEntered

    private void bInsertionTitle3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bInsertionTitle3MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle3MouseExited

    private void bInsertionTitle3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertionTitle3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bInsertionTitle3ActionPerformed

    private void bSDisplay2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay2MouseEntered
        home.setButtonForeground((JButton) evt.getComponent(), true);
    }//GEN-LAST:event_bSDisplay2MouseEntered

    private void bSDisplay2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSDisplay2MouseExited
        home.setButtonForeground((JButton) evt.getComponent(), false);
    }//GEN-LAST:event_bSDisplay2MouseExited

    private void bSDisplay2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSDisplay2ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Load the stack from the file
        Stack<Integer> stack = FileHandler.loadStackInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, stack, null);
        String result = operations.display();

        peekOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPeekOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bSDisplay2ActionPerformed

    private void bPop1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPop1ActionPerformed
        // Get a reference to the CardLayout of the pOutput panel
        CardLayout outputLayout = (CardLayout) pSOutput.getLayout();
        outputLayout.show(pSOutput, "SOLoading");

        // Load the stack from the file
        Stack<Integer> stack = FileHandler.loadStackInputValues();

        // Pass both array and stack to the constructor
        DataHandler operations = new DataHandler(null, stack, null);
        String result = operations.peek();

        // Save the updated stack to a file
        FileHandler.saveStackInputValues(stack);

        peekOutputArea.setText(result);

        Timer timer = new Timer(500, (ActionEvent e) -> {
            outputLayout.show(pSOutput, "SPeekOutput");
        });
        timer.setRepeats(false);
        timer.start();
    }//GEN-LAST:event_bPop1ActionPerformed

    private void bArrays5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays5MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays5MouseEntered

    private void bArrays5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bArrays5MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays5MouseExited

    private void bArrays5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArrays5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bArrays5ActionPerformed

    private void bHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHomeActionPerformed
        // Show the loading panel first
        CardLayout cardLayout = (CardLayout) pStack.getLayout();
        cardLayout.show(pStack, "Loading");

        // Replace "Home" with the actual panel name in the Home JFrame
        Home homeFrame = new Home();

        // Delay the visibility of the Home JFrame
        Timer showTimer = new Timer(500, (ActionEvent e) -> {
            homeFrame.setVisible(true);
        });
        showTimer.setRepeats(false);
        showTimer.start();

        // Dispose the current frame after a delay
        Timer disposeTimer = new Timer(600, (ActionEvent e) -> {
            dispose();
        });
        disposeTimer.setRepeats(false);
        disposeTimer.start();
    }//GEN-LAST:event_bHomeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StackFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bArrays1;
    private javax.swing.JButton bArrays4;
    private javax.swing.JButton bArrays5;
    private javax.swing.JButton bBack1;
    private javax.swing.JButton bBack10;
    private javax.swing.JButton bEInsert2;
    private javax.swing.JButton bHome;
    private javax.swing.JButton bInsertBack1;
    private javax.swing.JButton bInsertBack2;
    private javax.swing.JButton bInsertBack3;
    private javax.swing.JButton bInsertionTitle1;
    private javax.swing.JButton bInsertionTitle2;
    private javax.swing.JButton bInsertionTitle3;
    private javax.swing.JButton bNext1;
    private javax.swing.JButton bPop;
    private javax.swing.JButton bPop1;
    private javax.swing.JButton bPush;
    private javax.swing.JButton bSDisplay;
    private javax.swing.JButton bSDisplay1;
    private javax.swing.JButton bSDisplay2;
    private javax.swing.JButton bSReset;
    private javax.swing.JButton bStackPeek;
    private javax.swing.JButton bStackPop;
    private javax.swing.JButton bStackPush;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea22;
    private javax.swing.JTextArea jTextArea25;
    private javax.swing.JTextArea jTextArea27;
    private javax.swing.JTextArea jTextArea28;
    private javax.swing.JPanel pContainer;
    private javax.swing.JPanel pLoading;
    private javax.swing.JPanel pSBot11;
    private javax.swing.JPanel pSBot17;
    private javax.swing.JPanel pSBot18;
    private javax.swing.JPanel pSBot19;
    private javax.swing.JPanel pSBot3;
    private javax.swing.JPanel pSCenter19;
    private javax.swing.JPanel pSCenter25;
    private javax.swing.JPanel pSCenter27;
    private javax.swing.JPanel pSCenter28;
    private javax.swing.JPanel pSCenter29;
    private javax.swing.JPanel pSCenter4;
    private javax.swing.JPanel pSCenter5;
    private javax.swing.JPanel pSILoading;
    private javax.swing.JPanel pSInput;
    private javax.swing.JPanel pSMenus;
    private javax.swing.JPanel pSOIntro;
    private javax.swing.JPanel pSOLoading;
    private javax.swing.JPanel pSOutput;
    private javax.swing.JPanel pSPeek;
    private javax.swing.JPanel pSPeekIntro;
    private javax.swing.JPanel pSPeekOutput;
    private javax.swing.JPanel pSPop;
    private javax.swing.JPanel pSPopIntro;
    private javax.swing.JPanel pSPopOutput;
    private javax.swing.JPanel pSPush;
    private javax.swing.JPanel pSPushIntro;
    private javax.swing.JPanel pSPushOutput;
    private javax.swing.JPanel pSTop11;
    private javax.swing.JPanel pSTop13;
    private javax.swing.JPanel pSTop20;
    private javax.swing.JPanel pSTop21;
    private javax.swing.JPanel pSTop22;
    private javax.swing.JPanel pSTop3;
    private javax.swing.JPanel pStack;
    private javax.swing.JPanel pStackIntro;
    private javax.swing.JPanel pStackOperations;
    private javax.swing.JTextArea peekOutputArea;
    private javax.swing.JTextArea popOutputArea;
    private javax.swing.JTextArea pushOutputArea;
    private javax.swing.JTextField sPValue;
    private javax.swing.JLabel sTitle13;
    private javax.swing.JLabel sTitle4;
    private javax.swing.JLabel structImg1;
    // End of variables declaration//GEN-END:variables
}
